var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var appConfig = {
    appName: "Consermaq",
    version: "0.0.1",
    auth_token: "consermaq_token",
    auth_sistema_contexto: "consermaq_user",
    testMode: false,
    defaultRoute: "/",
    rootServiceRoute: "http://localhost:4500/",
    serviceUrls: function () {
        return {
            autenticacao: {
                sistema: appConfig.rootServiceRoute + "api/security/token"
            },
            cliente: {
                listAll: appConfig.rootServiceRoute + "api/cliente/listAll",
                getById: appConfig.rootServiceRoute + "api/pessoafisica/getById",
                listAllPF: appConfig.rootServiceRoute + "api/cliente/listPF",
                listAllPJ: appConfig.rootServiceRoute + "api/cliente/listPJ",
                delete: appConfig.rootServiceRoute + "api/cliente/delete",
                edit: appConfig.rootServiceRoute + "api/cliente/update",
                save: appConfig.rootServiceRoute + "api/cliente/create",
                deleteAlot: appConfig.rootServiceRoute + "api/cliente/deleteAlot"
            },
            produto: {
                getById: appConfig.rootServiceRoute + "api/product/getById",
                listAll: appConfig.rootServiceRoute + "api/products/listAll",
                deleteProduto: appConfig.rootServiceRoute + "api/product/delete",
                editProduto: appConfig.rootServiceRoute + "api/product/update",
                saveProduto: appConfig.rootServiceRoute + "api/product/create",
                deleteAlotProduto: appConfig.rootServiceRoute + "api/product/deleteAlot"
            },
            ordemServico: {
                listAll: appConfig.rootServiceRoute + "api/ordemServico/listAll",
                listAllCanceled: appConfig.rootServiceRoute + "api/ordemServico/listAllCanceled",
                getById: appConfig.rootServiceRoute + "api/ordemServico/getById",
                delete: appConfig.rootServiceRoute + "api/ordemServico/delete",
                edit: appConfig.rootServiceRoute + "api/ordemServico/update",
                save: appConfig.rootServiceRoute + "api/ordemServico/create",
                deleteAlot: appConfig.rootServiceRoute + "api/ordemServico/deleteAlot",
                finalizar: appConfig.rootServiceRoute + "api/ordemServico/finalizar",
                cancelar: appConfig.rootServiceRoute + "api/ordemServico/cancelar",
                ativarOrdemServico: appConfig.rootServiceRoute + "api/ordemServico/ativarOrdemServico",
                retornarPendente: appConfig.rootServiceRoute + "api/ordemServico/retornarPendente",
                buscarPorData: appConfig.rootServiceRoute + "api/ordemServico/buscarPorData",
            },
            servico: {
                listAll: appConfig.rootServiceRoute + "api/servico/listAll",
                getById: appConfig.rootServiceRoute + "api/servico/getById",
                delete: appConfig.rootServiceRoute + "api/servico/delete",
                edit: appConfig.rootServiceRoute + "api/servico/update",
                save: appConfig.rootServiceRoute + "api/servico/create",
                deleteAlot: appConfig.rootServiceRoute + "api/servico/deleteAlot"
            },
            usuario: {
                listAll: appConfig.rootServiceRoute + "api/user/listAll",
                getById: appConfig.rootServiceRoute + "api/user/getById",
                edit: appConfig.rootServiceRoute + "api/user/update",
                save: appConfig.rootServiceRoute + "api/user/create",
                bloquearAlot: appConfig.rootServiceRoute + "api/user/bloquearAlot"
            }
        };
    }
};
var Consermaq;
(function (Consermaq) {
    'use strict';
    var modules = new Array();
    modules.push('ngRoute');
    modules.push('ngTouch');
    modules.push('ngAnimate');
    modules.push('ngMessages');
    modules.push('ngMaterial');
    modules.push('md.data.table');
    modules.push('mdDataTable');
    modules.push('ngMdIcons');
    modules.push('ngSanitize');
    modules.push('ui.bootstrap');
    modules.push('toastr');
    modules.push('angular-loading-bar');
    modules.push('ui.mask');
    modules.push('ng-currency');
    modules.push('ngPrint');
    modules.push('mdPickers');
    modules.push('ui.utils.masks');
    modules.push('idf.br-filters');
    modules.push('validation.match');
    modules.push('ui.grid');
    modules.push('ui.grid.treeView');
    modules.push('ui.grid.selection');
    modules.push('ui.grid.autoResize');
    modules.push('ui.grid.exporter');
    angular.module(appConfig.appName, modules);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    'use strict';
    function config($routeProvider) {
        $routeProvider
            .when("/", {
            templateUrl: "app/views/cliente/pessoafisica/pessoafisica.html",
            controller: "PessoaFisicaController",
            controllerAs: "vm"
        })
            .when("/login", {
            templateUrl: "app/views/autenticacao/login.html",
            controller: "LoginController",
            controllerAs: "vm"
        })
            .when("/pessoafisica", {
            templateUrl: "app/views/cliente/pessoafisica/pessoafisica.html",
            controller: "PessoaFisicaController",
            controllerAs: "vm"
        })
            .when("/pessoajuridica", {
            templateUrl: "app/views/cliente/pessoajuridica/pessoajuridica.html",
            controller: "PessoaJuridicaController",
            controllerAs: "vm"
        })
            .when("/produtos", {
            templateUrl: "app/views/produto/produto.html",
            controller: "ProdutoController",
            controllerAs: "vm"
        })
            .when("/ordemServico", {
            templateUrl: "app/views/ordemServico/ordemServico.html",
            controller: "OrdemServicoController",
            controllerAs: "vm"
        })
            .when("/ordemServicoCancelada", {
            templateUrl: "app/views/ordemServico/ordemServicoCancelada.html",
            controller: "OrdemServicoCanceladaController",
            controllerAs: "vm"
        })
            .when("/ordemServico/:id", {
            templateUrl: "app/views/ordemServico/editOrdemServico.html",
            controller: "EditOrdemServicoController",
            controllerAs: "vm"
        })
            .when("/usuarios", {
            templateUrl: "app/views/usuario/usuario.html",
            controller: "UsuarioController",
            controllerAs: "vm"
        })
            .when("/relatorios", {
            templateUrl: "app/views/relatorio/relatorios.html",
            controller: "RelatorioController",
            controllerAs: "vm"
        })
            .when("/logout", {
            templateUrl: "app/views/autenticacao/login.html",
            controller: "LogoutController",
            controllerAs: "vm"
        })
            .otherwise({
            templateUrl: "app/views/shared/404.html",
            controller: "SharedController",
            controllerAs: "vm"
        });
        ;
    }
    config.$inject = ['$routeProvider'];
    angular.module(appConfig.appName).config(config);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    'use strict';
    function config(cfpLoadingBarProvider, $locationProvider) {
        cfpLoadingBarProvider.includeSpinner = true;
        cfpLoadingBarProvider.includeBar = true;
        cfpLoadingBarProvider.parentSelector = '#loading-bar-container';
        cfpLoadingBarProvider.spinnerTemplate = '<div id="loading-bar-spinner">' +
            '   <div style="padding-left: 30px;">' +
            '       <div class="spinner-icon"></div>' +
            '   </div>' +
            '   <div class="spinner-text">Carregando...</div>' +
            '</div>';
        $locationProvider.hashPrefix('');
    }
    config.$inject = ['cfpLoadingBarProvider', '$locationProvider'];
    angular.module(appConfig.appName).config(config);
    function start($rootScope, autenticacaoService) {
        autenticacaoService.carregaUsuarioAutenticado();
    }
    angular.module(appConfig.appName).config(config);
    start.$inject = ['$rootScope', 'AutenticacaoService'];
    angular.module(appConfig.appName).run(start);
})(Consermaq || (Consermaq = {}));
var KTAX_DynamicDashboard;
(function (KTAX_DynamicDashboard) {
    'use strict';
    var PasswordValidationEngine = (function () {
        function PasswordValidationEngine(senhaCriptografada) {
            this.senhaCriptografada = senhaCriptografada;
            this.valor = "|54be1d80-b6d0-45c0-b8d7-13b3c798729f";
        }
        PasswordValidationEngine.prototype.verificarSenha = function (senha) {
            return this.senhaCriptografada == this.criptografaSenha(senha + this.valor);
        };
        PasswordValidationEngine.prototype.criptografaSenha = function (s) {
            function L(k, d) { return (k << d) | (k >>> (32 - d)); }
            function K(G, k) {
                var I, d, F, H, x;
                F = (G & 2147483648);
                H = (k & 2147483648);
                I = (G & 1073741824);
                d = (k & 1073741824);
                x = (G & 1073741823) + (k & 1073741823);
                if (I & d) {
                    return (x ^ 2147483648 ^ F ^ H);
                }
                if (I | d) {
                    if (x & 1073741824) {
                        return (x ^ 3221225472 ^ F ^ H);
                    }
                    else {
                        return (x ^ 1073741824 ^ F ^ H);
                    }
                }
                else {
                    return (x ^ F ^ H);
                }
            }
            function r(d, F, k) { return (d & F) | ((~d) & k); }
            function q(d, F, k) { return (d & k) | (F & (~k)); }
            function p(d, F, k) { return (d ^ F ^ k); }
            function n(d, F, k) { return (F ^ (d | (~k))); }
            function u(G, F, aa, Z, k, H, I) { G = K(G, K(K(r(F, aa, Z), k), I)); return K(L(G, H), F); }
            function f(G, F, aa, Z, k, H, I) { G = K(G, K(K(q(F, aa, Z), k), I)); return K(L(G, H), F); }
            function D(G, F, aa, Z, k, H, I) {
                G = K(G, K(K(p(F, aa, Z), k), I));
                return K(L(G, H), F);
            }
            function t(G, F, aa, Z, k, H, I) { G = K(G, K(K(n(F, aa, Z), k), I)); return K(L(G, H), F); }
            function e(G) {
                var Z;
                var F = G.length;
                var x = F + 8;
                var k = (x - (x % 64)) / 64;
                var I = (k + 1) * 16;
                var aa = Array(I - 1);
                var d = 0;
                var H = 0;
                while (H < F) {
                    Z = (H - (H % 4)) / 4;
                    d = (H % 4) * 8;
                    aa[Z] = (aa[Z] | (G.charCodeAt(H) << d));
                    H++;
                }
                Z = (H - (H % 4)) / 4;
                d = (H % 4) * 8;
                aa[Z] = aa[Z] | (128 << d);
                aa[I - 2] = F << 3;
                aa[I - 1] = F >>> 29;
                return aa;
            }
            function B(x) {
                var k = "", F = "", G, d;
                for (d = 0; d <= 3; d++) {
                    G = (x >>> (d * 8)) & 255;
                    F = "0" + G.toString(16);
                    k = k + F.substr(F.length - 2, 2);
                }
                return k;
            }
            function J(k) {
                k = k.replace(/rn/g, "n");
                var d = "";
                for (var F = 0; F < k.length; F++) {
                    var x = k.charCodeAt(F);
                    if (x < 128) {
                        d += String.fromCharCode(x);
                    }
                    else {
                        if ((x > 127) && (x < 2048)) {
                            d += String.fromCharCode((x >> 6) | 192);
                            d += String.fromCharCode((x & 63) | 128);
                        }
                        else {
                            d += String.fromCharCode((x >> 12) | 224);
                            d += String.fromCharCode(((x >> 6) & 63) | 128);
                            d += String.fromCharCode((x & 63) | 128);
                        }
                    }
                }
                return d;
            }
            var C = Array();
            var P, h, E, v, g, Y, X, W, V;
            var S = 7, Q = 12, N = 17, M = 22;
            var A = 5, z = 9, y = 14, w = 20;
            var o = 4, m = 11, l = 16, j = 23;
            var U = 6, T = 10, R = 15, O = 21;
            s = J(s);
            C = e(s);
            Y = 1732584193;
            X = 4023233417;
            W = 2562383102;
            V = 271733878;
            for (P = 0; P < C.length; P += 16) {
                h = Y;
                E = X;
                v = W;
                g = V;
                Y = u(Y, X, W, V, C[P + 0], S, 3614090360);
                V = u(V, Y, X, W, C[P + 1], Q, 3905402710);
                W = u(W, V, Y, X, C[P + 2], N, 606105819);
                X = u(X, W, V, Y, C[P + 3], M, 3250441966);
                Y = u(Y, X, W, V, C[P + 4], S, 4118548399);
                V = u(V, Y, X, W, C[P + 5], Q, 1200080426);
                W = u(W, V, Y, X, C[P + 6], N, 2821735955);
                X = u(X, W, V, Y, C[P + 7], M, 4249261313);
                Y = u(Y, X, W, V, C[P + 8], S, 1770035416);
                V = u(V, Y, X, W, C[P + 9], Q, 2336552879);
                W = u(W, V, Y, X, C[P + 10], N, 4294925233);
                X = u(X, W, V, Y, C[P + 11], M, 2304563134);
                Y = u(Y, X, W, V, C[P + 12], S, 1804603682);
                V = u(V, Y, X, W, C[P + 13], Q, 4254626195);
                W = u(W, V, Y, X, C[P + 14], N, 2792965006);
                X = u(X, W, V, Y, C[P + 15], M, 1236535329);
                Y = f(Y, X, W, V, C[P + 1], A, 4129170786);
                V = f(V, Y, X, W, C[P + 6], z, 3225465664);
                W = f(W, V, Y, X, C[P + 11], y, 643717713);
                X = f(X, W, V, Y, C[P + 0], w, 3921069994);
                Y = f(Y, X, W, V, C[P + 5], A, 3593408605);
                V = f(V, Y, X, W, C[P + 10], z, 38016083);
                W = f(W, V, Y, X, C[P + 15], y, 3634488961);
                X = f(X, W, V, Y, C[P + 4], w, 3889429448);
                Y = f(Y, X, W, V, C[P + 9], A, 568446438);
                V = f(V, Y, X, W, C[P + 14], z, 3275163606);
                W = f(W, V, Y, X, C[P + 3], y, 4107603335);
                X = f(X, W, V, Y, C[P + 8], w, 1163531501);
                Y = f(Y, X, W, V, C[P + 13], A, 2850285829);
                V = f(V, Y, X, W, C[P + 2], z, 4243563512);
                W = f(W, V, Y, X, C[P + 7], y, 1735328473);
                X = f(X, W, V, Y, C[P + 12], w, 2368359562);
                Y = D(Y, X, W, V, C[P + 5], o, 4294588738);
                V = D(V, Y, X, W, C[P + 8], m, 2272392833);
                W = D(W, V, Y, X, C[P + 11], l, 1839030562);
                X = D(X, W, V, Y, C[P + 14], j, 4259657740);
                Y = D(Y, X, W, V, C[P + 1], o, 2763975236);
                V = D(V, Y, X, W, C[P + 4], m, 1272893353);
                W = D(W, V, Y, X, C[P + 7], l, 4139469664);
                X = D(X, W, V, Y, C[P + 10], j, 3200236656);
                Y = D(Y, X, W, V, C[P + 13], o, 681279174);
                V = D(V, Y, X, W, C[P + 0], m, 3936430074);
                W = D(W, V, Y, X, C[P + 3], l, 3572445317);
                X = D(X, W, V, Y, C[P + 6], j, 76029189);
                Y = D(Y, X, W, V, C[P + 9], o, 3654602809);
                V = D(V, Y, X, W, C[P + 12], m, 3873151461);
                W = D(W, V, Y, X, C[P + 15], l, 530742520);
                X = D(X, W, V, Y, C[P + 2], j, 3299628645);
                Y = t(Y, X, W, V, C[P + 0], U, 4096336452);
                V = t(V, Y, X, W, C[P + 7], T, 1126891415);
                W = t(W, V, Y, X, C[P + 14], R, 2878612391);
                X = t(X, W, V, Y, C[P + 5], O, 4237533241);
                Y = t(Y, X, W, V, C[P + 12], U, 1700485571);
                V = t(V, Y, X, W, C[P + 3], T, 2399980690);
                W = t(W, V, Y, X, C[P + 10], R, 4293915773);
                X = t(X, W, V, Y, C[P + 1], O, 2240044497);
                Y = t(Y, X, W, V, C[P + 8], U, 1873313359);
                V = t(V, Y, X, W, C[P + 15], T, 4264355552);
                W = t(W, V, Y, X, C[P + 6], R, 2734768916);
                X = t(X, W, V, Y, C[P + 13], O, 1309151649);
                Y = t(Y, X, W, V, C[P + 4], U, 4149444226);
                V = t(V, Y, X, W, C[P + 11], T, 3174756917);
                W = t(W, V, Y, X, C[P + 2], R, 718787259);
                X = t(X, W, V, Y, C[P + 9], O, 3951481745);
                Y = K(Y, h);
                X = K(X, E);
                W = K(W, v);
                V = K(V, g);
            }
            var i = B(Y) + B(X) + B(W) + B(V);
            return i.toLowerCase();
        };
        return PasswordValidationEngine;
    }());
    KTAX_DynamicDashboard.PasswordValidationEngine = PasswordValidationEngine;
    angular.module(appConfig.appName).directive("passwordvalidation", PasswordValidation);
    function PasswordValidation() {
        return {
            require: 'ngModel',
            link: function (scope, elm, attrs, ctrl) {
                ctrl.$validators.passwordvalidation = function (modelValue, viewValue) {
                    var _scope = scope;
                    var _ctrl = ctrl;
                    var validate = true;
                    if (!ctrl.$isEmpty(modelValue)) {
                        var engine = new PasswordValidationEngine(_scope.$root.sistemaContexo.usuarioLogado.password);
                        validate = engine.verificarSenha(modelValue);
                    }
                    return validate;
                };
            }
        };
    }
})(KTAX_DynamicDashboard || (KTAX_DynamicDashboard = {}));
var Consermaq;
(function (Consermaq) {
    var User = (function () {
        function User() {
        }
        return User;
    }());
    Consermaq.User = User;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var SistemaContexto = (function () {
        function SistemaContexto() {
        }
        return SistemaContexto;
    }());
    Consermaq.SistemaContexto = SistemaContexto;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var Cliente = (function () {
        function Cliente() {
        }
        return Cliente;
    }());
    Consermaq.Cliente = Cliente;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var Produto = (function () {
        function Produto() {
        }
        return Produto;
    }());
    Consermaq.Produto = Produto;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var OrdemServico = (function () {
        function OrdemServico() {
        }
        return OrdemServico;
    }());
    Consermaq.OrdemServico = OrdemServico;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ServicoItem = (function () {
        function ServicoItem() {
        }
        return ServicoItem;
    }());
    Consermaq.ServicoItem = ServicoItem;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var Servico = (function () {
        function Servico() {
        }
        return Servico;
    }());
    Consermaq.Servico = Servico;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ProdutoABS = (function () {
        function ProdutoABS() {
        }
        return ProdutoABS;
    }());
    Consermaq.ProdutoABS = ProdutoABS;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LoginModel = (function () {
        function LoginModel(nomeUsuario, senha) {
            this.nomeUsuario = nomeUsuario;
            this.senha = senha;
        }
        return LoginModel;
    }());
    Consermaq.LoginModel = LoginModel;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    'use strict';
    angular.module(appConfig.appName).directive('numberOnly', numberOnly);
    function numberOnly() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                var negativo = /\-/.test(attrs.numberOnly);
                var decimal = /\.|\,/.test(attrs.numberOnly) ? /\.|\,/.exec(attrs.numberOnly)[0] : null;
                var regExp = '^';
                regExp += negativo ? '[\\-]{0,1}' : '';
                regExp += '[\\d]+';
                if (decimal != null) {
                    regExp += '[\\' + decimal + '][\\d]+|';
                    if (negativo) {
                        regExp += '[\\-]{0,1}';
                    }
                    regExp += '[\\d]+';
                }
                regExp += '';
                var regExp1 = new RegExp(regExp);
                ngModel.$parsers.unshift(function (input) {
                    if (input === undefined)
                        return null;
                    if (input === null)
                        return;
                    input = input.toString().replace(/\./, decimal);
                    if (input == '-')
                        return input;
                    if (decimal !== null && input.charAt(input.length - 1) == decimal)
                        return input;
                    input = regExp1.test(input) ? regExp1.exec(input)[0] : null;
                    var viewVal = null;
                    if (input !== null) {
                        input = decimal != null ? parseFloat(input.replace(/\,/, '.')) : parseInt(input);
                    }
                    viewVal = isNaN(input) || input === null ? '' : input;
                    ngModel.$setViewValue(decimal != null ? viewVal.toString().replace(/\./, decimal) : viewVal.toString());
                    ngModel.$render();
                    return isNaN(input) ? null : input;
                });
                ngModel.$formatters.unshift(function (value) {
                    if (value !== undefined && value !== null) {
                        return decimal != null ? value.toString().replace(/\./, decimal) : value.toString();
                    }
                });
            }
        };
    }
    ;
})(Consermaq || (Consermaq = {}));
;
var Consermaq;
(function (Consermaq) {
    var AppServiceBase = (function () {
        function AppServiceBase($rootScope, $http) {
            this.rootScope = $rootScope;
            this.httpService = $http;
        }
        AppServiceBase.prototype.handlerResponded = function (response, params) {
            response.data.requestParams = params;
            return response.data;
        };
        AppServiceBase.prototype.getByIdFromUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.get(url + '/' + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, id); });
            return result;
        };
        AppServiceBase.prototype.listAllFromUrl = function (url) {
            var _this = this;
            var result = this.httpService.get(url, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.listAllByParamFromUrl = function (url, param) {
            var _this = this;
            var result = this.httpService.get(url + "/" + param, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.createByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.put(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.updateByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.post(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.removeByUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.delete(url + "/" + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.getFromUrl = function (url, params) {
            var _this = this;
            var result = this.httpService.get(url + (params ? params : ""), this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, (params ? params : "")); });
            return result;
        };
        AppServiceBase.prototype.postFromUrl = function (url, obj, header) {
            var _this = this;
            if (!header)
                header = this.rootScope.header;
            var result = this.httpService.post(url, obj, header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.$inject = ['$rootScope', '$http'];
        return AppServiceBase;
    }());
    Consermaq.AppServiceBase = AppServiceBase;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ClienteService = (function (_super) {
        __extends(ClienteService, _super);
        function ClienteService() {
            _super.apply(this, arguments);
        }
        ClienteService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().cliente.getById, id);
        };
        ClienteService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().cliente.listAll);
        };
        ClienteService.prototype.listAllPF = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().cliente.listAllPF);
        };
        ClienteService.prototype.listAllPJ = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().cliente.listAllPJ);
        };
        ClienteService.prototype.delete = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().cliente.delete, id);
        };
        ClienteService.prototype.deleteAlot = function (clientes) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().cliente.deleteAlot, clientes);
        };
        ClienteService.prototype.edit = function (cliente) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().cliente.edit, cliente);
        };
        ClienteService.prototype.save = function (cliente) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().cliente.save, cliente);
        };
        return ClienteService;
    }(Consermaq.AppServiceBase));
    Consermaq.ClienteService = ClienteService;
    angular.module(appConfig.appName).service("ClienteService", ClienteService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ProdutoService = (function (_super) {
        __extends(ProdutoService, _super);
        function ProdutoService() {
            _super.apply(this, arguments);
        }
        ProdutoService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().produto.getById, id);
        };
        ProdutoService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().produto.listAll);
        };
        ProdutoService.prototype.deleteProduto = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().produto.deleteProduto, id);
        };
        ProdutoService.prototype.deleteProdutoAlot = function (produtos) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().produto.deleteAlotProduto, produtos);
        };
        ProdutoService.prototype.editProduto = function (produto) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().produto.editProduto, produto);
        };
        ProdutoService.prototype.saveProduto = function (produto) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().produto.saveProduto, produto);
        };
        return ProdutoService;
    }(Consermaq.AppServiceBase));
    Consermaq.ProdutoService = ProdutoService;
    angular.module(appConfig.appName).service("ProdutoService", ProdutoService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var AutenticacaoService = (function (_super) {
        __extends(AutenticacaoService, _super);
        function AutenticacaoService($routeParams, $rootScope, $location, $http) {
            _super.call(this, $rootScope, $http);
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$http = $http;
        }
        AutenticacaoService.prototype.login = function (loginModel) {
            var _this = this;
            var result;
            result = this.autenticacao(loginModel)
                .then(function (response) {
                return _this.setAutenticacao(response);
            });
            return result;
        };
        AutenticacaoService.prototype.logout = function () {
            this.rootScope.token = null;
            this.rootScope.sistemaContexo = null;
            sessionStorage.removeItem(appConfig.auth_token);
            sessionStorage.removeItem(appConfig.auth_sistema_contexto);
            this.refreshHeader();
        };
        AutenticacaoService.prototype.carregaUsuarioAutenticado = function () {
            var _this = this;
            this.rootScope.token = sessionStorage.getItem(appConfig.auth_token);
            if (this.rootScope.token) {
                this.rootScope.sistemaContexo = angular.fromJson(sessionStorage
                    .getItem(appConfig.auth_sistema_contexto));
                this.refreshHeader();
                this.$location.path('/');
            }
            this.rootScope.$on("$routeChangeStart", function (event, next, current) {
                if (_this.rootScope.token == null) {
                    _this.$location.path('/login');
                }
            });
        };
        AutenticacaoService.prototype.autenticacao = function (login) {
            var dt = "grant_type=password&username=" + login.nomeUsuario + "&password=" + login.senha;
            var header = { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } };
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().autenticacao.sistema, dt, header);
        };
        AutenticacaoService.prototype.setAutenticacao = function (response) {
            sessionStorage.setItem(appConfig.auth_token, response.access_token);
            sessionStorage.setItem(appConfig.auth_sistema_contexto, response.sistema_contexto);
            this.carregaUsuarioAutenticado();
            return response;
        };
        AutenticacaoService.prototype.refreshHeader = function () {
            this.rootScope.header = {};
            if (this.rootScope.token && this.rootScope.sistemaContexo) {
                this.rootScope.header = {
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        'Authorization': 'Bearer ' + this.rootScope.token
                    }
                };
            }
        };
        AutenticacaoService.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            '$http'];
        return AutenticacaoService;
    }(Consermaq.AppServiceBase));
    Consermaq.AutenticacaoService = AutenticacaoService;
    angular.module(appConfig.appName).service("AutenticacaoService", AutenticacaoService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var OrdemServicoService = (function (_super) {
        __extends(OrdemServicoService, _super);
        function OrdemServicoService() {
            _super.apply(this, arguments);
        }
        OrdemServicoService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().ordemServico.getById, id);
        };
        OrdemServicoService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().ordemServico.listAll);
        };
        OrdemServicoService.prototype.listAllCanceled = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().ordemServico.listAllCanceled);
        };
        OrdemServicoService.prototype.delete = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().ordemServico.delete, id);
        };
        OrdemServicoService.prototype.deleteAlot = function (produtos) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.deleteAlot, produtos);
        };
        OrdemServicoService.prototype.edit = function (ordemServico) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().ordemServico.edit, ordemServico);
        };
        OrdemServicoService.prototype.save = function (ordemServico) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.save, ordemServico);
        };
        OrdemServicoService.prototype.finalizar = function (ordemServico) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.finalizar, ordemServico);
        };
        OrdemServicoService.prototype.cancelar = function (ordemServico) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.cancelar, ordemServico);
        };
        OrdemServicoService.prototype.ativarOrdemServico = function (ordemServico) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.ativarOrdemServico, ordemServico);
        };
        OrdemServicoService.prototype.retornarPendente = function (ordemServico) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.retornarPendente, ordemServico);
        };
        OrdemServicoService.prototype.buscarPorData = function (dataInicial, dataFinal) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.buscarPorData, { dataInicial: dataInicial, dataEncerramento: dataFinal });
        };
        return OrdemServicoService;
    }(Consermaq.AppServiceBase));
    Consermaq.OrdemServicoService = OrdemServicoService;
    angular.module(appConfig.appName).service("OrdemServicoService", OrdemServicoService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ServicoService = (function (_super) {
        __extends(ServicoService, _super);
        function ServicoService() {
            _super.apply(this, arguments);
        }
        ServicoService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().servico.getById, id);
        };
        ServicoService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().servico.listAll);
        };
        ServicoService.prototype.delete = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().servico.delete, id);
        };
        ServicoService.prototype.deleteAlot = function (servicos) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().servico.deleteAlot, servicos);
        };
        ServicoService.prototype.edit = function (servico) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().servico.edit, servico);
        };
        ServicoService.prototype.save = function (servico) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().servico.save, servico);
        };
        return ServicoService;
    }(Consermaq.AppServiceBase));
    Consermaq.ServicoService = ServicoService;
    angular.module(appConfig.appName).service("ServicoService", ServicoService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var UsuarioService = (function (_super) {
        __extends(UsuarioService, _super);
        function UsuarioService() {
            _super.apply(this, arguments);
        }
        UsuarioService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().usuario.getById, id);
        };
        UsuarioService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().usuario.listAll);
        };
        UsuarioService.prototype.bloquearAlot = function (usuarios) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().usuario.bloquearAlot, usuarios);
        };
        UsuarioService.prototype.edit = function (usuario) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().usuario.edit, usuario);
        };
        UsuarioService.prototype.save = function (usuario) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().usuario.save, usuario);
        };
        return UsuarioService;
    }(Consermaq.AppServiceBase));
    Consermaq.UsuarioService = UsuarioService;
    angular.module(appConfig.appName).service("UsuarioService", UsuarioService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LoginController = (function () {
        function LoginController($routeParams, $rootScope, $location, autenticacaoService, toastr) {
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$rootScope = $rootScope;
            this.autenticacaoService = autenticacaoService;
            this.toastr = toastr;
            this.loginModel = new Consermaq.LoginModel();
        }
        LoginController.prototype.login = function () {
            var _this = this;
            this.autenticacaoService.login(this.loginModel)
                .then(function (data) {
                _this.toastr.success("Seja bem vindo " + _this.$rootScope.sistemaContexo.usuarioLogado.nome, "Você está autenticado");
                _this.$location.url("/");
            })
                .catch(function (response) {
                _this.toastr.error(response.data.error_description, "Erro ao autenticar");
            });
        };
        LoginController.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            'AutenticacaoService',
            'toastr'];
        return LoginController;
    }());
    Consermaq.LoginController = LoginController;
    angular.module(appConfig.appName).controller('LoginController', LoginController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LogoutController = (function () {
        function LogoutController($routeParams, $rootScope, $location, autenticacaoService, toastr) {
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$rootScope = $rootScope;
            this.autenticacaoService = autenticacaoService;
            this.toastr = toastr;
            this.loginModel = new Consermaq.LoginModel();
            this.logout();
        }
        LogoutController.prototype.logout = function () {
            this.autenticacaoService.logout();
            this.toastr.success("Obrigado por usar o sistema Consermaq", "Sessão encerrada");
            this.$location.url("/login");
        };
        LogoutController.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            'AutenticacaoService',
            'toastr'];
        return LogoutController;
    }());
    Consermaq.LogoutController = LogoutController;
    angular.module(appConfig.appName).controller('LogoutController', LogoutController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaFisicaController = (function () {
        function PessoaFisicaController($location, clienteService, toastr, mdDialog, timeout, $rootScope) {
            this.$location = $location;
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$rootScope = $rootScope;
            this.isAdmin = this.$rootScope.sistemaContexo.usuarioLogado.isAdmin;
            this.pessoasFisicas = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadPessoaFisica();
        }
        PessoaFisicaController.prototype.loadPessoaFisica = function () {
            var _this = this;
            this.clienteService.listAllPF()
                .then(function (data) {
                _this.pessoasFisicas = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar as Pessoas Fisicas, erro: " + response); });
        };
        PessoaFisicaController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        PessoaFisicaController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        PessoaFisicaController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        PessoaFisicaController.prototype.modalCreatePessoaFisica = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalPessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pf: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasFisicas.push(response.NewPessoaFisica);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaFisicaController.prototype.modalEditPessoaFisica = function (ev, pf) {
            var _this = this;
            var index = this.pessoasFisicas.indexOf(pf);
            this.mdDialog.show({
                controller: "ModalPessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pf: function () { return angular.copy(pf); }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasFisicas[index] = response.UpdatePessoaFisica;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaFisicaController.prototype.modalDeletePessoaFisica = function (ev, pessoasfisicas) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeletePessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-delete-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pessoasfisicas: function () { return pessoasfisicas; }
                }
            }).then(function (response) {
                if (response) {
                    pessoasfisicas.forEach(function (pf) {
                        var index = _this.pessoasFisicas.indexOf(pf);
                        _this.pessoasFisicas.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        PessoaFisicaController.$inject = ['$location', 'ClienteService', 'toastr', '$mdDialog', '$timeout', '$rootScope'];
        return PessoaFisicaController;
    }());
    Consermaq.PessoaFisicaController = PessoaFisicaController;
    angular.module(appConfig.appName).controller('PessoaFisicaController', PessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalPessoaFisicaController = (function () {
        function ModalPessoaFisicaController(clienteService, toastr, mdDialog, pf) {
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pf = pf;
        }
        ModalPessoaFisicaController.prototype.savePessoaFisica = function () {
            var _this = this;
            if (!this.pf.id) {
                this.clienteService.save(this.pf)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewPessoaFisica: data });
                    _this.toastr.success("Cliente cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente não pode ser cadastrado!');
                });
            }
            else {
                this.clienteService.edit(this.pf)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdatePessoaFisica: data });
                    _this.toastr.success("Cliente Pessoa Fisica editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente Pessoa Fisica não pode ser editado!');
                });
            }
        };
        ModalPessoaFisicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalPessoaFisicaController.$inject = ['ClienteService', 'toastr', '$mdDialog', 'pf'];
        return ModalPessoaFisicaController;
    }());
    Consermaq.ModalPessoaFisicaController = ModalPessoaFisicaController;
    angular.module(appConfig.appName).controller('ModalPessoaFisicaController', ModalPessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalDeletePessoaFisicaController = (function () {
        function ModalDeletePessoaFisicaController(clienteService, toastr, mdDialog, pessoasfisicas) {
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pessoasfisicas = pessoasfisicas;
        }
        ModalDeletePessoaFisicaController.prototype.delete = function () {
            var _this = this;
            this.clienteService.deleteAlot(this.pessoasfisicas)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Pessoas Fisicas excluidas com sucesso!");
                else
                    _this.toastr.success("Pessoa Fisica excluida com sucesso!");
                _this.mdDialog.hide({ pessoasfisicas: data });
            })
                .catch(function (response) {
                _this.toastr.error('Pessoa Fisica não pode ser excluida!');
            });
        };
        ModalDeletePessoaFisicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeletePessoaFisicaController.$inject = ['ClienteService', 'toastr', '$mdDialog', 'pessoasfisicas'];
        return ModalDeletePessoaFisicaController;
    }());
    Consermaq.ModalDeletePessoaFisicaController = ModalDeletePessoaFisicaController;
    angular.module(appConfig.appName).controller('ModalDeletePessoaFisicaController', ModalDeletePessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaJuridicaController = (function () {
        function PessoaJuridicaController($location, clienteService, toastr, mdDialog, timeout, $rootScope) {
            this.$location = $location;
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$rootScope = $rootScope;
            this.pessoasJuridicas = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.isAdmin = this.$rootScope.sistemaContexo.usuarioLogado.isAdmin;
            this.loadPessoaJuridica();
        }
        PessoaJuridicaController.prototype.loadPessoaJuridica = function () {
            var _this = this;
            this.clienteService.listAllPJ()
                .then(function (data) {
                _this.pessoasJuridicas = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar as Pessoas Juridicas, erro: " + response); });
        };
        PessoaJuridicaController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        PessoaJuridicaController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        PessoaJuridicaController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        PessoaJuridicaController.prototype.modalCreatePessoaJuridica = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalPessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pj: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasJuridicas.push(response.NewPessoaJuridica);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaJuridicaController.prototype.modalEditPessoaJuridica = function (ev, pj) {
            var _this = this;
            var index = this.pessoasJuridicas.indexOf(pj);
            this.mdDialog.show({
                controller: "ModalPessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pj: function () { return angular.copy(pj); }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasJuridicas[index] = response.UpdatePessoaJuridica;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaJuridicaController.prototype.modalDeletePessoaJuridica = function (ev, pessoasJuridicas) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeletePessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-delete-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pessoasJuridicas: function () { return pessoasJuridicas; }
                }
            }).then(function (response) {
                if (response) {
                    pessoasJuridicas.forEach(function (pj) {
                        var index = _this.pessoasJuridicas.indexOf(pj);
                        _this.pessoasJuridicas.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        PessoaJuridicaController.$inject = ['$location', 'ClienteService', 'toastr', '$mdDialog', '$timeout', '$rootScope'];
        return PessoaJuridicaController;
    }());
    Consermaq.PessoaJuridicaController = PessoaJuridicaController;
    angular.module(appConfig.appName).controller('PessoaJuridicaController', PessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalPessoaJuridicaController = (function () {
        function ModalPessoaJuridicaController(clienteService, toastr, mdDialog, pj) {
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pj = pj;
        }
        ModalPessoaJuridicaController.prototype.savePessoaJuridica = function () {
            var _this = this;
            if (!this.pj.id) {
                this.clienteService.save(this.pj)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewPessoaJuridica: data });
                    _this.toastr.success("Cliente cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente não pode ser cadastrado!');
                });
            }
            else {
                this.clienteService.edit(this.pj)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdatePessoaJuridica: data });
                    _this.toastr.success("Cliente Pessoa Juridica editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente Pessoa Juridica não pode ser editado!');
                });
            }
        };
        ModalPessoaJuridicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalPessoaJuridicaController.$inject = ['ClienteService', 'toastr', '$mdDialog', 'pj'];
        return ModalPessoaJuridicaController;
    }());
    Consermaq.ModalPessoaJuridicaController = ModalPessoaJuridicaController;
    angular.module(appConfig.appName).controller('ModalPessoaJuridicaController', ModalPessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalDeletePessoaJuridicaController = (function () {
        function ModalDeletePessoaJuridicaController(clienteService, toastr, mdDialog, pessoasjuridicas) {
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pessoasjuridicas = pessoasjuridicas;
        }
        ModalDeletePessoaJuridicaController.prototype.delete = function () {
            var _this = this;
            this.clienteService.deleteAlot(this.pessoasjuridicas)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Pessoas Juridicas excluidas com sucesso!");
                else
                    _this.toastr.success("Pessoa Juridica excluida com sucesso!");
                _this.mdDialog.hide({ pessoasjuridicas: data });
            })
                .catch(function (response) {
                _this.toastr.error('Pessoa Juridica não pode ser excluida!');
            });
        };
        ModalDeletePessoaJuridicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeletePessoaJuridicaController.$inject = ['ClienteService', 'toastr', '$mdDialog', 'pessoasJuridicas'];
        return ModalDeletePessoaJuridicaController;
    }());
    Consermaq.ModalDeletePessoaJuridicaController = ModalDeletePessoaJuridicaController;
    angular.module(appConfig.appName).controller('ModalDeletePessoaJuridicaController', ModalDeletePessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalOrdemServicoController = (function () {
        function ModalOrdemServicoController($location, $routeParams, clienteService, ordemServicoService, toastr, timeout, $q, mdDialog) {
            this.$location = $location;
            this.$routeParams = $routeParams;
            this.clienteService = clienteService;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.timeout = timeout;
            this.$q = $q;
            this.mdDialog = mdDialog;
            this.clientes = new Array();
            this.ordemServico = new Consermaq.OrdemServico;
            this.load();
        }
        ModalOrdemServicoController.prototype.load = function () {
            this.loadClientes();
        };
        ModalOrdemServicoController.prototype.loadClientes = function () {
            var _this = this;
            this.clienteService.listAll()
                .then(function (data) {
                _this.clientes = data.map(function (c) {
                    c.nome = c.nome.toUpperCase();
                    return c;
                });
            })
                .catch(function (response) { return console.log("Não foi possivel carregar os clientes, erro: " + response); });
        };
        ModalOrdemServicoController.prototype.buscarPF = function (query) {
            var _this = this;
            var results = query ? this.clientes.filter(function (c) { return _this.filterPF(query, c); }) : this.clientes.filter(function (c) { return c.cpf != null; });
            var deferred = this.$q.defer();
            this.timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
            return deferred.promise;
        };
        ModalOrdemServicoController.prototype.filterPF = function (query, clientePF) {
            query = angular.uppercase(query);
            var regex = /^[0-9]/g;
            if (regex.test(query)) {
                if (clientePF.cpf) {
                    return (clientePF.cpf.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
            else {
                if (clientePF.cpf) {
                    return (clientePF.nome.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
        };
        ;
        ModalOrdemServicoController.prototype.buscarPJ = function (query) {
            var _this = this;
            var results = query ? this.clientes.filter(function (c) { return _this.filterPJ(query, c); }) : this.clientes.filter(function (c) { return c.cpf == null; });
            var deferred = this.$q.defer();
            this.timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
            return deferred.promise;
        };
        ModalOrdemServicoController.prototype.filterPJ = function (query, clientePJ) {
            query = angular.uppercase(query);
            var regex = /^[0-9]/g;
            if (regex.test(query)) {
                if (clientePJ.cnpj) {
                    return (clientePJ.cnpj.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
            else {
                if (clientePJ.cnpj)
                    return (clientePJ.nome.indexOf(query) === 0);
            }
        };
        ;
        ModalOrdemServicoController.prototype.clearSelectItem = function () {
            this.selectedItem = new Array();
        };
        ModalOrdemServicoController.prototype.save = function () {
            var _this = this;
            if (this.selectedItem.id) {
                this.ordemServico.clienteId = this.selectedItem.id;
                this.ordemServicoService.save(this.ordemServico)
                    .then(function (data) {
                    _this.ordemServico = data;
                    _this.cliente = new Consermaq.Cliente();
                    if (_this.loadCliente())
                        _this.toastr.success("Ordem de serviço salva com sucesso!");
                    else
                        _this.toastr.error("Erro ao buscar dados do cliente!");
                }).catch(function (response) { _this.toastr.error("Erro ao salvar ordem de serviço!"); });
            }
        };
        ModalOrdemServicoController.prototype.loadCliente = function () {
            var _this = this;
            this.cliente = new Consermaq.Cliente();
            this.clientes.filter(function (c) {
                if (c.id == _this.ordemServico.clienteId)
                    _this.cliente = c;
            });
            if (this.cliente)
                return true;
            else
                return false;
        };
        ModalOrdemServicoController.prototype.close = function () {
            if (this.ordemServico.id)
                this.mdDialog.hide({ newOrdemServico: this.ordemServico });
            else
                this.mdDialog.cancel();
        };
        ModalOrdemServicoController.$inject = ['$location', '$routeParams', 'ClienteService', 'OrdemServicoService',
            'toastr', '$timeout', '$q', '$mdDialog'];
        return ModalOrdemServicoController;
    }());
    Consermaq.ModalOrdemServicoController = ModalOrdemServicoController;
    angular.module(appConfig.appName).controller('ModalOrdemServicoController', ModalOrdemServicoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var OrdemServicoController = (function () {
        function OrdemServicoController($location, ordemServicoService, toastr, mdDialog, timeout, $q, $mdToast, $rootScope) {
            this.$location = $location;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$q = $q;
            this.$mdToast = $mdToast;
            this.$rootScope = $rootScope;
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.ordemServicos = new Array();
            this.ordemServicosTotal = new Array();
            this.isAdmin = this.$rootScope.sistemaContexo.usuarioLogado.isAdmin;
            this.statusFiltro = new Array();
            this.status = [{ id: 1, nome: 'Aberto' }, { id: 2, nome: 'Pendente' }, { id: 3, nome: 'Finalizado' }];
            this.tiposClientes = [{ id: 1, nome: 'Pessoa Física' }, { id: 2, nome: 'Pessoa Jurídica' }];
            this.tipoData = [{ id: 1, nome: 'Abertura' }, { id: 2, nome: 'Encerramento' }];
            this.dataMinCalendarioInicio = new Date();
            this.dataMinCalendarioInicio.setDate(-60);
            this.dataMaxCalendarioInicio = new Date();
            this.loadOrdemServicos();
        }
        OrdemServicoController.prototype.loadOrdemServicos = function () {
            var _this = this;
            this.ordemServicoService.listAll()
                .then(function (data) {
                _this.ordemServicos = data;
                _this.ordemServicosTotal = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar os Produtos, erro: " + response); });
        };
        OrdemServicoController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        OrdemServicoController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        OrdemServicoController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        OrdemServicoController.prototype.editOrdemServico = function (id) {
            this.$location.path("ordemServico/" + id);
        };
        OrdemServicoController.prototype.modalCreateOrdemServico = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalOrdemServicoController",
                templateUrl: 'app/views/ordemServico/modal-novaOrdemServico.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
            }).then(function (response) {
                if (response.newOrdemServico) {
                    _this.ordemServicos.push(response.newOrdemServico);
                    _this.selected = new Array();
                }
            });
        };
        OrdemServicoController.prototype.abrirModalCancelar = function (ev, ordemServico) {
            var _this = this;
            this.mdDialog.show({
                controller: 'CancelarController',
                templateUrl: 'app/views/ordemServico/modal/cancelar-modal.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    ordemServico: function () { return ordemServico; }
                }
            }).then(function (response) {
                if (response.ordemServicoCancelada) {
                    var index = _this.ordemServicos.map(function (os) {
                        return os.id;
                    }).indexOf(response.ordemServicoCancelada.id);
                    if (index != -1)
                        _this.ordemServicos.splice(index, 1);
                }
            });
        };
        OrdemServicoController.prototype.abrirModalVisualizar = function (ev, ordemServico) {
            var _this = this;
            this.ordemServicoService.getById(ordemServico.id)
                .then(function (data) {
                var ordemServicoVisualizacao = data;
                _this.mdDialog.show({
                    controller: 'VisualizarController',
                    templateUrl: 'app/views/ordemServico/modal/visualizar-modal.html',
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    controllerAs: 'vm',
                    resolve: {
                        ordemServico: function () { return ordemServicoVisualizacao; }
                    }
                });
            })
                .catch(function () { _this.toastr.error("Erro ao abrir modal visualização"); });
        };
        OrdemServicoController.prototype.finalizar = function (ordemServico) {
            var _this = this;
            this.ordemServicoService.finalizar(ordemServico)
                .then(function (data) {
                var index = _this.ordemServicos.indexOf(ordemServico);
                if (index != -1) {
                    data.cliente = ordemServico.cliente;
                    data.servicos = ordemServico.servicos;
                    _this.ordemServicos[index] = data;
                    _this.toastr.success("Ordem de Serviço: " + ordemServico.id, "Finalizada com sucesso!");
                }
            })
                .catch(function (response) { _this.toastr.error("Erro ao finalizar ordem de serviço: " + response); });
        };
        OrdemServicoController.prototype.retornarPendente = function (ordemServico) {
            var _this = this;
            this.ordemServicoService.retornarPendente(ordemServico)
                .then(function (data) {
                var index = _this.ordemServicos.indexOf(ordemServico);
                if (index != -1) {
                    data.cliente = ordemServico.cliente;
                    data.servicos = ordemServico.servicos;
                    _this.ordemServicos[index] = data;
                    _this.toastr.success("Ordem de Serviço: " + ordemServico.id, "Retornado para pendente com sucesso!");
                }
            })
                .catch(function (response) { _this.toastr.error("Erro ao retornar a ordem de serviço para pendente: " + response); });
        };
        OrdemServicoController.prototype.possuiFiltro = function () {
            return (this.filtrarData != 'Nenhuma') && (this.dataInicialFiltro != null && this.dataInicialFiltro != undefined)
                || (this.statusFiltro.length > 0) || (this.tipoClienteFiltro != null && this.tipoClienteFiltro != undefined
                && this.tipoClienteFiltro != 'Nenhum');
        };
        OrdemServicoController.prototype.clearFiltro = function () {
            this.filtrarData == 'Nenhuma';
            this.dataInicialFiltro = null;
            this.dataFinalFiltro = null;
            this.statusFiltro = new Array();
            this.tipoClienteFiltro = 'Nenhum';
            this.filterTable();
        };
        OrdemServicoController.prototype.filterTable = function () {
            if (this.filtrarData == 'Nenhuma') {
                this.dataInicialFiltro = null;
                this.dataFinalFiltro = null;
            }
            if (this.statusFiltro.length > 0) {
                this.ordemServicos = this.modificarTableStatus();
                if (this.tipoClienteFiltro && this.tipoClienteFiltro != 'Nenhum')
                    this.ordemServicos = this.modificarTableTipoCliente(this.ordemServicos);
                if (this.dataInicialFiltro)
                    this.ordemServicos = this.modificarTableTipoData(this.ordemServicos);
            }
            else if (this.tipoClienteFiltro && this.tipoClienteFiltro != 'Nenhum') {
                this.ordemServicos = this.modificarTableTipoCliente(this.ordemServicosTotal);
                if (this.dataInicialFiltro)
                    this.ordemServicos = this.modificarTableTipoData(this.ordemServicos);
            }
            else if (this.dataInicialFiltro)
                this.ordemServicos = this.modificarTableTipoData(this.ordemServicosTotal);
            else
                this.ordemServicos = this.ordemServicosTotal;
        };
        OrdemServicoController.prototype.modificarTableStatus = function () {
            var _this = this;
            var ordemServico = new Array();
            this.ordemServicosTotal.filter(function (os) {
                return _this.statusFiltro.filter(function (s) {
                    if (os.status == s)
                        ordemServico.push(os);
                });
            });
            return ordemServico;
        };
        OrdemServicoController.prototype.modificarTableTipoCliente = function (ordemServicos) {
            var _this = this;
            var novaOrdemServicos = new Array();
            novaOrdemServicos = ordemServicos.filter(function (os) {
                if (_this.tipoClienteFiltro == 1)
                    return os.cliente.cpf != null && os.cliente.cnpj == null;
                else
                    return os.cliente.cpf == null && os.cliente.cnpj != null;
            });
            return novaOrdemServicos;
        };
        OrdemServicoController.prototype.modificarTableTipoData = function (ordemServicos) {
            var _this = this;
            var novaOrdemServicos = new Array();
            novaOrdemServicos = ordemServicos.filter(function (os) {
                if (_this.filtrarData == 'Abertura') {
                    if (_this.dataFinalFiltro)
                        return (new Date(os.dataInicial) >= _this.dataInicialFiltro) && ((new Date(os.dataInicial).getDate() >= _this.dataFinalFiltro.getDate())
                            && (new Date(os.dataInicial).getMonth() < _this.dataFinalFiltro.getMonth()) || (new Date(os.dataInicial).getDate() <= _this.dataFinalFiltro.getDate())
                            && (new Date(os.dataInicial).getMonth() <= _this.dataFinalFiltro.getMonth()));
                    else
                        return new Date(os.dataInicial) >= _this.dataInicialFiltro;
                }
                else {
                    if (_this.dataFinalFiltro)
                        return (new Date(os.dataEncerramento) >= _this.dataInicialFiltro) && (new Date(os.dataEncerramento).getDate() <= _this.dataFinalFiltro.getDate())
                            && (new Date(os.dataEncerramento).getMonth() <= _this.dataFinalFiltro.getMonth());
                    else
                        return new Date(os.dataEncerramento) >= _this.dataInicialFiltro;
                }
            });
            return novaOrdemServicos;
        };
        OrdemServicoController.$inject = ['$location', 'OrdemServicoService', 'toastr', '$mdDialog',
            '$timeout', '$q', '$mdToast', '$rootScope'];
        return OrdemServicoController;
    }());
    Consermaq.OrdemServicoController = OrdemServicoController;
    angular.module(appConfig.appName).controller('OrdemServicoController', OrdemServicoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var OrdemServicoCanceladaController = (function () {
        function OrdemServicoCanceladaController($location, ordemServicoService, toastr, mdDialog, timeout, $q, $mdToast, $rootScope) {
            this.$location = $location;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$q = $q;
            this.$mdToast = $mdToast;
            this.$rootScope = $rootScope;
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 10,
                page: 1
            };
            this.ordemServicos = new Array();
            this.ordemServicosTotal = new Array();
            this.isAdmin = this.$rootScope.sistemaContexo.usuarioLogado.isAdmin;
            this.tiposClientes = [{ id: 1, nome: 'Pessoa Física' }, { id: 2, nome: 'Pessoa Jurídica' }];
            this.tipoData = [{ id: 1, nome: 'Abertura' }, { id: 2, nome: 'Encerramento' }];
            this.dataMinCalendarioInicio = new Date();
            this.dataMinCalendarioInicio.setDate(-60);
            this.dataMaxCalendarioInicio = new Date();
            this.loadOrdemServicos();
        }
        OrdemServicoCanceladaController.prototype.loadOrdemServicos = function () {
            var _this = this;
            this.ordemServicoService.listAllCanceled()
                .then(function (data) {
                _this.ordemServicos = data;
                _this.ordemServicosTotal = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar as ordem de servicos, erro: " + response); });
        };
        OrdemServicoCanceladaController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        OrdemServicoCanceladaController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        OrdemServicoCanceladaController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        OrdemServicoCanceladaController.prototype.abrirModalAtivarOrdemServico = function (ev, ordemServico) {
            var _this = this;
            this.mdDialog.show({
                controller: 'AtivarOrdemServicoController',
                templateUrl: 'app/views/ordemServico/modal/ativar-ordemServico-modal.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    ordemServico: function () { return ordemServico; }
                }
            }).then(function (response) {
                if (response.ordemServicoAtivada) {
                    var index = _this.ordemServicos.map(function (os) {
                        return os.id;
                    }).indexOf(response.ordemServicoAtivada.id);
                    if (index != -1)
                        _this.ordemServicos.splice(index, 1);
                }
            });
        };
        OrdemServicoCanceladaController.prototype.abrirModalVisualizar = function (ev, ordemServico) {
            var _this = this;
            this.ordemServicoService.getById(ordemServico.id)
                .then(function (data) {
                var ordemServicoVisualizacao = data;
                _this.mdDialog.show({
                    controller: 'VisualizarController',
                    templateUrl: 'app/views/ordemServico/modal/visualizar-modal.html',
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    controllerAs: 'vm',
                    resolve: {
                        ordemServico: function () { return ordemServicoVisualizacao; }
                    }
                });
            })
                .catch(function () { _this.toastr.error("Erro ao abrir modal visualização"); });
        };
        OrdemServicoCanceladaController.prototype.possuiFiltro = function () {
            return (this.dataInicialFiltro != null && this.dataInicialFiltro != undefined)
                || (this.tipoClienteFiltro != null && this.tipoClienteFiltro != undefined
                    && this.tipoClienteFiltro != 'Nenhum');
        };
        OrdemServicoCanceladaController.prototype.clearFiltro = function () {
            this.dataInicialFiltro = null;
            this.dataFinalFiltro = null;
            this.tipoClienteFiltro = 'Nenhum';
            this.filterTable();
        };
        OrdemServicoCanceladaController.prototype.filterTable = function () {
            if (this.tipoClienteFiltro && this.tipoClienteFiltro != 'Nenhum') {
                this.ordemServicos = this.modificarTableTipoCliente(this.ordemServicos);
                if (this.dataInicialFiltro)
                    this.ordemServicos = this.modificarTableTipoData(this.ordemServicos);
            }
            else if (this.dataInicialFiltro)
                this.ordemServicos = this.modificarTableTipoData(this.ordemServicosTotal);
            else
                this.ordemServicos = this.ordemServicosTotal;
        };
        OrdemServicoCanceladaController.prototype.modificarTableTipoCliente = function (ordemServicos) {
            var _this = this;
            var novaOrdemServicos = new Array();
            novaOrdemServicos = ordemServicos.filter(function (os) {
                if (_this.tipoClienteFiltro == 1)
                    return os.cliente.cpf != null && os.cliente.cnpj == null;
                else
                    return os.cliente.cpf == null && os.cliente.cnpj != null;
            });
            return novaOrdemServicos;
        };
        OrdemServicoCanceladaController.prototype.modificarTableTipoData = function (ordemServicos) {
            var _this = this;
            var novaOrdemServicos = new Array();
            novaOrdemServicos = ordemServicos.filter(function (os) {
                if (_this.dataFinalFiltro)
                    return (new Date(os.dataInicial) >= _this.dataInicialFiltro) && ((new Date(os.dataInicial).getDate() >= _this.dataFinalFiltro.getDate())
                        && (new Date(os.dataInicial).getMonth() < _this.dataFinalFiltro.getMonth()) || (new Date(os.dataInicial).getDate() <= _this.dataFinalFiltro.getDate())
                        && (new Date(os.dataInicial).getMonth() <= _this.dataFinalFiltro.getMonth()));
                else
                    return new Date(os.dataInicial) >= _this.dataInicialFiltro;
            });
            return novaOrdemServicos;
        };
        OrdemServicoCanceladaController.$inject = ['$location', 'OrdemServicoService', 'toastr', '$mdDialog',
            '$timeout', '$q', '$mdToast', '$rootScope'];
        return OrdemServicoCanceladaController;
    }());
    Consermaq.OrdemServicoCanceladaController = OrdemServicoCanceladaController;
    angular.module(appConfig.appName).controller('OrdemServicoCanceladaController', OrdemServicoCanceladaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var EditOrdemServicoController = (function () {
        function EditOrdemServicoController($location, $routeParams, clienteService, ordemServicoService, toastr, timeout, $q, mdDialog) {
            this.$location = $location;
            this.$routeParams = $routeParams;
            this.clienteService = clienteService;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.timeout = timeout;
            this.$q = $q;
            this.mdDialog = mdDialog;
            this.clientes = new Array();
            this.ordemServico = new Consermaq.OrdemServico;
            this.servicoItemsRemovidos = new Array();
            this.optionsMaterialAdicionado = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.queryMaterialAdicionado = {
                order: 'name',
                limit: 3,
                page: 1
            };
            this.materiaisAtualizados = new Array();
            this.servicosRemovidos = new Array();
            this.selectedUserIndex = undefined;
            this.load();
        }
        EditOrdemServicoController.prototype.selectUserIndex = function (index) {
            if (this.selectedUserIndex !== index) {
                this.selectedUserIndex = index;
            }
            else {
                this.selectedUserIndex = undefined;
            }
        };
        ;
        EditOrdemServicoController.prototype.load = function () {
            var _this = this;
            this.loadClientes();
            if (this.$routeParams.id) {
                this.ordemServicoService.getById(this.$routeParams.id)
                    .then(function (data) {
                    _this.ordemServico = data;
                    _this.loadTipoPessoa();
                    _this.loadDateFormat();
                })
                    .catch(function (response) { return toastr.error("Não carregou a ordem de serviço, erro: " + response); });
            }
        };
        EditOrdemServicoController.prototype.loadDateFormat = function () {
            if (this.ordemServico.servicos.length > 0) {
                this.ordemServico.servicos.filter(function (s) {
                    s.inicioServico = new Date(s.inicioServico);
                    s.fimServico = new Date(s.fimServico);
                });
            }
        };
        EditOrdemServicoController.prototype.loadTipoPessoa = function () {
            if (this.ordemServico.cliente.cpf)
                this.tipoCliente = 'pf';
            else
                this.tipoCliente = 'pj';
            this.selectedItem = this.ordemServico.cliente;
        };
        EditOrdemServicoController.prototype.loadClientes = function () {
            var _this = this;
            this.clienteService.listAll()
                .then(function (data) {
                _this.clientes = data;
                return _this.clientes.map(function (c) {
                    c.nome = c.nome.toUpperCase();
                    return c;
                });
            })
                .catch(function (response) { return console.log("Não foi possivel carregar os clientes, erro: " + response); });
        };
        EditOrdemServicoController.prototype.buscarPF = function (query) {
            var _this = this;
            var results = query ? this.clientes.filter(function (c) { return _this.filterPF(query, c); }) : this.clientes.filter(function (c) { return c.cpf != null; });
            var deferred = this.$q.defer();
            this.timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
            return deferred.promise;
        };
        EditOrdemServicoController.prototype.filterPF = function (query, clientePF) {
            query = angular.uppercase(query);
            var regex = /^[0-9]/g;
            if (regex.test(query)) {
                if (clientePF.cpf) {
                    return (clientePF.cpf.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
            else {
                if (clientePF.cpf) {
                    return (clientePF.nome.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
        };
        ;
        EditOrdemServicoController.prototype.buscarPJ = function (query) {
            var _this = this;
            var results = query ? this.clientes.filter(function (c) { return _this.filterPJ(query, c); }) : this.clientes.filter(function (c) { return c.cpf == null; });
            var deferred = this.$q.defer();
            this.timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
            return deferred.promise;
        };
        EditOrdemServicoController.prototype.filterPJ = function (query, clientePJ) {
            query = angular.uppercase(query);
            var regex = /^[0-9]/g;
            if (regex.test(query)) {
                if (clientePJ.cnpj) {
                    return (clientePJ.cnpj.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
            else {
                if (clientePJ.cnpj)
                    return (clientePJ.nome.indexOf(query) === 0);
            }
        };
        ;
        EditOrdemServicoController.prototype.clearSelectItem = function () {
            this.selectedItem = new Array();
        };
        EditOrdemServicoController.prototype.acrescentarValorTotal = function (valor) {
            this.ordemServico.valorTotal = Number(this.ordemServico.valorTotal) + Number(valor);
        };
        EditOrdemServicoController.prototype.diminuirValorTotal = function (valor) {
            this.ordemServico.valorTotal = Number(this.ordemServico.valorTotal) - Number(valor);
        };
        EditOrdemServicoController.prototype.abrirModalServico = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalServicoController",
                templateUrl: 'app/views/ordemServico/modal-servico.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    ordemServico: function () { return _this.ordemServico; },
                    ultimoItems: function () { return _this.materiaisAtualizados; },
                    servico: function () { return null; }
                }
            }).then(function (response) {
                if (response.newServico) {
                    _this.ordemServico.servicos.push(response.newServico);
                    _this.acrescentarValorTotal(response.newServico.valor);
                    if (response.newServico.servicoItems.length > 0)
                        _this.atualizaMaterialUsado(response.newServico.servicoItems);
                }
            });
        };
        EditOrdemServicoController.prototype.atualizaMaterialUsado = function (items) {
            var _this = this;
            items.filter(function (i) {
                var achou = false;
                _this.materiaisAtualizados.filter(function (m) {
                    if (m.id == i.product.id) {
                        m.quantityOnHand = i.product.quantityOnHand;
                        achou = true;
                    }
                });
                if (!achou || _this.materiaisAtualizados.length == 0)
                    _this.materiaisAtualizados.push(i.product);
            });
        };
        EditOrdemServicoController.prototype.editModalServico = function (ev, servicoEdit) {
            var _this = this;
            var index = this.ordemServico.servicos.indexOf(servicoEdit);
            var servico = angular.copy(servicoEdit);
            this.mdDialog.show({
                controller: "ModalServicoController",
                templateUrl: 'app/views/ordemServico/modal-servico.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    ordemServico: function () { return null; },
                    ultimoItems: function () { return _this.materiaisAtualizados; },
                    servico: function () { return angular.copy(servicoEdit); }
                }
            }).then(function (response) {
                if (response.itemsRemovidos.length > 0) {
                    response.itemsRemovidos.filter(function (i) {
                        _this.servicoItemsRemovidos.push(i);
                    });
                }
                if (response.newServico) {
                    _this.ordemServico.servicos[index] = response.newServico;
                    if (response.newServico.valor != servico.valor) {
                        if (response.newServico.valor > servico.valor)
                            _this.acrescentarValorTotal(Number(response.newServico.valor) - Number(servico.valor));
                        else
                            _this.diminuirValorTotal(Number(servico.valor) - Number(response.newServico.valor));
                    }
                    if (response.newServico.servicoItems.length > 0) {
                        if (servico.servicoItems.length > 0) {
                            var materiaisRemovidos = _this.MateriaisRemovidos(servico.servicoItems, response.newServico.servicoItems);
                            var servicosItems = angular.copy(response.newServico.servicoItems);
                            if (materiaisRemovidos.length > 0) {
                                materiaisRemovidos.filter(function (m) {
                                    servicosItems.push(m);
                                });
                            }
                            _this.atualizaMaterialUsado(servicosItems);
                        }
                        else {
                            _this.atualizaMaterialUsado(response.newServico.servicoItems);
                        }
                    }
                    else if (servico.servicoItems.length > 0) {
                        servico.servicoItems.filter(function (s) {
                            s.product.quantityOnHand = Number(s.product.quantityOnHand) + Number(s.quantity);
                        });
                        _this.atualizaMaterialUsado(servico.servicoItems);
                    }
                }
            });
        };
        EditOrdemServicoController.prototype.MateriaisRemovidos = function (itemAnterior, newItem) {
            var materiaisRemovidos = new Array();
            itemAnterior.filter(function (anterior) {
                var achou = false;
                newItem.filter(function (novo) {
                    if (anterior.product.id == novo.product.id) {
                        achou = true;
                    }
                });
                if (!achou) {
                    anterior.product.quantityOnHand = Number(anterior.product.quantityOnHand) + Number(anterior.quantity);
                    materiaisRemovidos.push(anterior);
                }
            });
            return materiaisRemovidos;
        };
        EditOrdemServicoController.prototype.RemoverMaterialUsado = function (items) {
            var _this = this;
            items.filter(function (i) {
                _this.materiaisAtualizados.filter(function (m) {
                    if (i.id == m.id) {
                        if ((m.quantityOnHand - i.quantityOnHand) > 0) {
                            var index = _this.materiaisAtualizados.indexOf(m);
                            _this.materiaisAtualizados[index].quantityOnHand = _this.materiaisAtualizados[index].quantityOnHand - i.quantityOnHand;
                        }
                        else {
                            var index = _this.materiaisAtualizados.indexOf(m);
                            _this.materiaisAtualizados.splice(index, 1);
                        }
                    }
                });
            });
        };
        EditOrdemServicoController.prototype.removeServico = function (index) {
            var _this = this;
            if (this.ordemServico.servicos[index].servicoItems.length > 0)
                this.atualizarMaterialRemovido(this.ordemServico.servicos[index].servicoItems);
            if (this.ordemServico.servicos[index].id > 0) {
                if (this.ordemServico.servicos[index].servicoItems.length > 0) {
                    this.ordemServico.servicos[index].servicoItems.filter(function (s) {
                        if (s.id > 0) {
                            _this.servicoItemsRemovidos.push(s);
                        }
                    });
                }
                this.servicosRemovidos.push(this.ordemServico.servicos[index]);
                this.diminuirValorTotal(this.ordemServico.servicos[index].valor);
                this.ordemServico.servicos.splice(index, 1);
                this.toastr.success("Servico removido com sucesso");
            }
            else {
                this.diminuirValorTotal(this.ordemServico.servicos[index].valor);
                this.ordemServico.servicos.splice(index, 1);
                this.toastr.success("Servico removido com sucesso");
            }
        };
        EditOrdemServicoController.prototype.atualizarMaterialRemovido = function (servicoItems) {
            var _this = this;
            if (this.materiaisAtualizados.length > 0) {
                servicoItems.filter(function (s) {
                    var achou = false;
                    _this.materiaisAtualizados.filter(function (m) {
                        if (m.id == s.product.id) {
                            s.product.quantityOnHand = Number(m.quantityOnHand) + Number(s.quantity);
                            achou = true;
                        }
                    });
                    if (!achou) {
                        s.product.quantityOnHand = Number(s.product.quantityOnHand) + Number(s.quantity);
                    }
                });
            }
            else {
                servicoItems.filter(function (s) {
                    s.product.quantityOnHand = Number(s.product.quantityOnHand) + Number(s.quantity);
                });
            }
            this.atualizaMaterialUsado(servicoItems);
        };
        EditOrdemServicoController.prototype.save = function () {
            var _this = this;
            if (this.selectedItem.id) {
                this.ordemServico.clienteId = this.selectedItem.id;
                this.ordemServico.materiaisAtualizados = this.materiaisAtualizados;
                this.ordemServico.servicoItemsRemovidos = this.servicoItemsRemovidos;
                this.ordemServico.servicosRemovidos = this.servicosRemovidos;
                this.ordemServicoService.edit(this.ordemServico)
                    .then(function (data) {
                    _this.ordemServico = data;
                    _this.cliente = new Consermaq.Cliente();
                    if (_this.loadCliente()) {
                        _this.toastr.success("Ordem de serviço salva com sucesso!");
                        _this.loadTipoPessoa();
                        _this.loadDateFormat();
                        _this.clearlistas();
                    }
                    else
                        _this.toastr.error("Erro ao buscar dados do cliente!");
                }).catch(function (response) { _this.toastr.error("Erro ao salvar ordem de serviço!"); });
            }
        };
        EditOrdemServicoController.prototype.clearlistas = function () {
            this.materiaisAtualizados = new Array();
            this.servicoItemsRemovidos = new Array();
            this.servicosRemovidos = new Array();
        };
        EditOrdemServicoController.prototype.loadCliente = function () {
            var _this = this;
            this.cliente = new Consermaq.Cliente();
            this.clientes.filter(function (c) {
                if (c.id == _this.ordemServico.clienteId)
                    _this.cliente = c;
            });
            if (this.cliente)
                return true;
            else
                return false;
        };
        EditOrdemServicoController.$inject = ['$location', '$routeParams', 'ClienteService', 'OrdemServicoService',
            'toastr', '$timeout', '$q', '$mdDialog'];
        return EditOrdemServicoController;
    }());
    Consermaq.EditOrdemServicoController = EditOrdemServicoController;
    angular.module(appConfig.appName).controller('EditOrdemServicoController', EditOrdemServicoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalServicoController = (function () {
        function ModalServicoController(ordemServicoService, usuarioService, produtoService, servicoService, toastr, mdDialog, timeout, $q, ordemServico, ultimoItems, servico) {
            this.ordemServicoService = ordemServicoService;
            this.usuarioService = usuarioService;
            this.produtoService = produtoService;
            this.servicoService = servicoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$q = $q;
            this.ordemServico = ordemServico;
            this.ultimoItems = ultimoItems;
            this.servico = servico;
            this.usuarios = new Array();
            this.produtos = new Array();
            this.adicionarMaterial = false;
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 3,
                page: 1
            };
            this.optionsMaterialAdicionado = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.queryMaterialAdicionado = {
                order: 'name',
                limit: 3,
                page: 1
            };
            this.servicoItems = new Array();
            this.produtosAdicionados = new Array();
            this.servicoItemsRemovidos = new Array();
            this.dataMinCalendarioInicioServico = new Date();
            this.dataMinCalendarioInicioServico.setDate(-60);
            this.dataMaxCalendarioInicioServico = new Date();
            this.load();
        }
        ModalServicoController.prototype.load = function () {
            this.loadUser();
            this.loadProduto();
            if (this.servico != null)
                this.popularServico();
        };
        ModalServicoController.prototype.popularServico = function () {
            this.selectedItem = this.servico.user;
            if (this.servico.servicoItems.length > 0) {
                this.servicoItems = this.servico.servicoItems;
                this.adicionarMaterial = true;
                if (this.servicoItems.length > 0 && this.ultimoItems.length > 0)
                    this.populaServicoItems(this.ultimoItems);
            }
        };
        ModalServicoController.prototype.loadProduto = function () {
            var _this = this;
            this.produtoService.listAll()
                .then(function (data) {
                _this.produtos = data;
                if (_this.ultimoItems.length > 0) {
                    _this.populaProdutos(_this.ultimoItems);
                }
            })
                .catch(function (response) { return console.log("Não foi possivel carregar os Produtos, erro: " + response); });
        };
        ModalServicoController.prototype.populaServicoItems = function (ultimoItems) {
            this.servicoItems.filter(function (s) {
                ultimoItems.filter(function (u) {
                    if (s.product.id == u.id) {
                        s.product = u;
                    }
                });
            });
        };
        ModalServicoController.prototype.populaProdutos = function (ultimoItems) {
            var _this = this;
            this.produtos.filter(function (p) {
                _this.ultimoItems.filter(function (u) {
                    if (p.id == u.id) {
                        p.quantityOnHand = u.quantityOnHand;
                    }
                });
            });
        };
        ModalServicoController.prototype.loadUser = function () {
            var _this = this;
            this.usuarioService.listAll()
                .then(function (data) {
                _this.usuarios = data.map(function (c) {
                    c.nome = c.nome.toUpperCase();
                    return c;
                });
            })
                .catch(function (response) { console.log("Não foi possivel carregar os usuarios, erro: " + response); });
        };
        ModalServicoController.prototype.buscarUsuario = function (query) {
            var _this = this;
            var results = query ? this.usuarios.filter(function (c) { return _this.filterUser(query, c); }) : this.usuarios.filter(function (c) { return c.id != null; });
            var deferred = this.$q.defer();
            this.timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
            return deferred.promise;
        };
        ModalServicoController.prototype.filterUser = function (query, user) {
            query = angular.uppercase(query);
            if (user) {
                return (user.nome.indexOf(query) === 0);
            }
            else {
                return false;
            }
        };
        ;
        ModalServicoController.prototype.addMaterial = function (produto) {
            if (produto.qntdSaida > 0) {
                if (produto.quantityOnHand - produto.qntdSaida >= 0) {
                    this.atualizaMaterialAdicionado(produto);
                    this.adicionaListaMaterial(produto);
                    this.limparQntdSaida(produto);
                    this.toastr.success("Material: " + produto.title, "Adicionado com sucesso");
                }
                else {
                    this.toastr.error("Qntd de Saída maior que Qntd de Estoque.", "Quantidade inválida!");
                }
            }
            else {
                this.toastr.error("Informe um valor no campo Qntd de Saída.", "Quantidade inválida!");
            }
        };
        ModalServicoController.prototype.adicionaListaMaterial = function (produto) {
            var servicoItem = new Consermaq.ServicoItem();
            servicoItem.productId = produto.id;
            servicoItem.product = this.populaProduto(produto);
            servicoItem.quantity = produto.qntdSaida;
            servicoItem.servico = null;
            servicoItem.servicoId = null;
            servicoItem.id = null;
            if (this.servicoItems.length > 0) {
                var existe = false;
                this.servicoItems.filter(function (s) {
                    if (s.productId == servicoItem.productId) {
                        s.quantity = Number(s.quantity) + Number(servicoItem.quantity);
                        s.product = servicoItem.product;
                        existe = true;
                    }
                });
                if (!existe) {
                    this.servicoItems.push(servicoItem);
                }
            }
            else {
                this.servicoItems.push(servicoItem);
            }
        };
        ModalServicoController.prototype.populaProduto = function (produtoABS) {
            var produto = new Consermaq.Produto();
            produto.id = produtoABS.id;
            produto.codeProduct = produtoABS.codeProduct;
            produto.description = produtoABS.description;
            produto.priceBuy = produtoABS.priceBuy;
            produto.quantityOnHand = produtoABS.quantityOnHand;
            produto.title = produtoABS.title;
            return produto;
        };
        ModalServicoController.prototype.atualizaMaterialAdicionado = function (produto) {
            var index = this.produtos.indexOf(produto);
            if (index > -1) {
                this.produtos[index].quantityOnHand = this.produtos[index].quantityOnHand - produto.qntdSaida;
                this.addMaterialNovaLista(angular.copy(this.produtos[index]));
            }
        };
        ModalServicoController.prototype.addMaterialNovaLista = function (produtoABS) {
            produtoABS.qntdSaida = null;
            var produto = new Consermaq.Produto();
            produto = angular.copy(produtoABS);
            if (this.produtosAdicionados.length > 0) {
                var existe = false;
                this.produtosAdicionados.filter(function (p) {
                    if (p.id == produto.id) {
                        p.quantityOnHand = produto.quantityOnHand;
                        existe = true;
                    }
                });
                if (!existe) {
                    this.produtosAdicionados.push(produto);
                }
            }
            else {
                this.produtosAdicionados.push(produto);
            }
        };
        ModalServicoController.prototype.limparQntdSaida = function (produto) {
            var index = this.produtos.indexOf(produto);
            if (index > -1) {
                this.produtos[index].qntdSaida = null;
            }
        };
        ModalServicoController.prototype.removerMaterialAdd = function (servicoItem) {
            this.atualizarMaterialRemovido(servicoItem);
            this.removeListaMaterial(servicoItem);
            if (servicoItem.id > 0)
                this.addItemRemovido(servicoItem);
            this.toastr.success("Material removido com sucesso");
        };
        ModalServicoController.prototype.addItemRemovido = function (servicoItem) {
            servicoItem.product = null;
            servicoItem.servico = null;
            this.servicoItemsRemovidos.push(servicoItem);
        };
        ModalServicoController.prototype.atualizarMaterialRemovido = function (servicoItem) {
            var _this = this;
            this.produtos.filter(function (p) {
                if (p.id == servicoItem.product.id) {
                    _this.removerMaterialNovaLista(p);
                    p.quantityOnHand = Number(p.quantityOnHand) + Number(servicoItem.quantity);
                }
            });
        };
        ModalServicoController.prototype.removeListaMaterial = function (servicoItem) {
            var index = this.servicoItems.indexOf(servicoItem);
            if (index > -1)
                this.servicoItems.splice(index, 1);
        };
        ModalServicoController.prototype.removerMaterialNovaLista = function (produtoABS) {
            var produto = new Consermaq.Produto();
            produto = angular.copy(produtoABS);
            var index = this.produtosAdicionados.map(function (el) {
                return el.id;
            }).indexOf(produto.id);
            if (index > -1)
                this.produtosAdicionados.splice(index, 1);
        };
        ModalServicoController.prototype.add = function () {
            if (this.adicionarMaterial)
                this.addWithMaterial();
            else
                this.addWithOutMaterial();
        };
        ModalServicoController.prototype.addWithMaterial = function () {
            if (this.selectedItem.id) {
                this.servico.userId = this.selectedItem.id;
                this.servico.user = this.getUser(this.servico.userId);
                if (this.ordemServico != null)
                    this.servico.ordemServicoId = this.ordemServico.id;
                this.servico.servicoItems = this.servicoItems;
                this.toastr.success("Serviço adicionado com sucesso!");
                this.mdDialog.hide({ newServico: this.servico, itemsRemovidos: this.servicoItemsRemovidos });
            }
            else {
                this.toastr.success("Erro ao Adicionar serviço!");
            }
        };
        ModalServicoController.prototype.addWithOutMaterial = function () {
            if (this.selectedItem.id) {
                this.servico.userId = this.selectedItem.id;
                this.servico.user = this.getUser(this.servico.userId);
                if (this.ordemServico != null)
                    this.servico.ordemServicoId = this.ordemServico.id;
                this.toastr.success("Serviço adicionado com sucesso!");
                this.mdDialog.hide({ newServico: this.servico, itemsRemovidos: this.servicoItemsRemovidos });
            }
            else {
                this.toastr.success("Erro ao Adicionar serviço!");
            }
        };
        ModalServicoController.prototype.close = function () {
            this.mdDialog.cancel();
        };
        ModalServicoController.prototype.getUser = function (id) {
            var usuario = new Consermaq.User();
            this.usuarios.filter(function (u) { if (u.id == id) {
                usuario = u;
            } });
            return usuario;
        };
        ModalServicoController.$inject = ['OrdemServicoService', 'UsuarioService', 'ProdutoService', 'ServicoService',
            'toastr', '$mdDialog', '$timeout', '$q', 'ordemServico', 'ultimoItems', 'servico'];
        return ModalServicoController;
    }());
    Consermaq.ModalServicoController = ModalServicoController;
    angular.module(appConfig.appName).controller('ModalServicoController', ModalServicoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var CancelarController = (function () {
        function CancelarController(ordemServico, mdDialog, ordemServicoService, toastr) {
            this.ordemServico = ordemServico;
            this.mdDialog = mdDialog;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
        }
        CancelarController.prototype.close = function () {
            this.mdDialog.cancel();
        };
        CancelarController.prototype.cancelar = function () {
            var _this = this;
            this.ordemServicoService.cancelar(this.ordemServico)
                .then(function (data) {
                _this.mdDialog.hide({ ordemServicoCancelada: data });
                _this.toastr.success("Ordem de Serviço: " + _this.ordemServico.id, "Cancelada com sucesso!");
            })
                .catch(function (response) { _this.toastr.error("Erro ao cancelar ordem de serviço: " + response); });
        };
        CancelarController.$inject = ['ordemServico', '$mdDialog', 'OrdemServicoService', 'toastr'];
        return CancelarController;
    }());
    Consermaq.CancelarController = CancelarController;
    angular.module(appConfig.appName).controller('CancelarController', CancelarController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var VisualizarController = (function () {
        function VisualizarController(mdDialog, ordemServico, ordemServicoService, toastr) {
            this.mdDialog = mdDialog;
            this.ordemServico = ordemServico;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.clientes = new Array();
            this.selectedUserIndex = undefined;
            this.load();
        }
        VisualizarController.prototype.selectUserIndex = function (index) {
            if (this.selectedUserIndex !== index) {
                this.selectedUserIndex = index;
            }
            else {
                this.selectedUserIndex = undefined;
            }
        };
        ;
        VisualizarController.prototype.load = function () {
            this.loadTipoPessoa();
            this.loadDateFormat();
        };
        VisualizarController.prototype.loadDateFormat = function () {
            if (this.ordemServico.servicos) {
                this.ordemServico.servicos.filter(function (s) {
                    s.inicioServico = new Date(s.inicioServico);
                    s.fimServico = new Date(s.fimServico);
                });
            }
        };
        VisualizarController.prototype.loadTipoPessoa = function () {
            if (this.ordemServico.cliente.cpf)
                this.tipoCliente = 'pf';
            else
                this.tipoCliente = 'pj';
            this.selectedItem = this.ordemServico.cliente;
        };
        VisualizarController.prototype.close = function () {
            this.mdDialog.cancel();
        };
        VisualizarController.$inject = ['$mdDialog', 'ordemServico', 'OrdemServicoService', 'toastr'];
        return VisualizarController;
    }());
    Consermaq.VisualizarController = VisualizarController;
    angular.module(appConfig.appName).controller('VisualizarController', VisualizarController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var AtivarOrdemServicoController = (function () {
        function AtivarOrdemServicoController(ordemServico, mdDialog, ordemServicoService, toastr) {
            this.ordemServico = ordemServico;
            this.mdDialog = mdDialog;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
        }
        AtivarOrdemServicoController.prototype.close = function () {
            this.mdDialog.cancel();
        };
        AtivarOrdemServicoController.prototype.ativarOrdemServico = function () {
            var _this = this;
            this.ordemServicoService.ativarOrdemServico(this.ordemServico)
                .then(function (data) {
                _this.mdDialog.hide({ ordemServicoAtivada: data });
                _this.toastr.success("Ordem de Serviço: " + _this.ordemServico.id, "Ordem de Serviço ativada com sucesso!");
            })
                .catch(function (response) {
                var toast = _this.toastr.error(response.data.errors[0].value, "Não foi possivel Ativar ordem de serviço", { timeOut: 10000 });
                _this.close();
            });
        };
        AtivarOrdemServicoController.$inject = ['ordemServico', '$mdDialog', 'OrdemServicoService', 'toastr'];
        return AtivarOrdemServicoController;
    }());
    Consermaq.AtivarOrdemServicoController = AtivarOrdemServicoController;
    angular.module(appConfig.appName).controller('AtivarOrdemServicoController', AtivarOrdemServicoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var UsuarioController = (function () {
        function UsuarioController($location, usuarioService, toastr, mdDialog, timeout, $rootScope) {
            this.$location = $location;
            this.usuarioService = usuarioService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$rootScope = $rootScope;
            this.usuarios = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.isAdmin = this.$rootScope.sistemaContexo.usuarioLogado.isAdmin;
            this.loadUsuarios();
        }
        UsuarioController.prototype.loadUsuarios = function () {
            var _this = this;
            this.usuarioService.listAll()
                .then(function (data) {
                _this.usuarios = data;
            })
                .catch(function (response) { return _this.toastr.error("Não foi possivel carregar os Usuários, erro: " + response.error); });
        };
        UsuarioController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        UsuarioController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        UsuarioController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        UsuarioController.prototype.modalCreateUsuario = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalUsuarioController",
                templateUrl: 'app/views/usuario/modal-usuario.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    usuario: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.usuarios.push(response.NewUsuario);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        UsuarioController.prototype.modalEditUsuario = function (ev, usuario) {
            var _this = this;
            var index = this.usuarios.indexOf(usuario);
            this.mdDialog.show({
                controller: "ModalUsuarioController",
                templateUrl: 'app/views/usuario/modal-usuario.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    usuario: function () { return angular.copy(usuario); }
                }
            }).then(function (response) {
                if (response) {
                    _this.usuarios[index] = response.UpdateUsuarios;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        UsuarioController.$inject = ['$location', 'UsuarioService', 'toastr', '$mdDialog', '$timeout', '$rootScope'];
        return UsuarioController;
    }());
    Consermaq.UsuarioController = UsuarioController;
    angular.module(appConfig.appName).controller('UsuarioController', UsuarioController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalUsuarioController = (function () {
        function ModalUsuarioController(usuarioService, toastr, mdDialog, usuario, $rootScope) {
            this.usuarioService = usuarioService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.usuario = usuario;
            this.$rootScope = $rootScope;
            this.validateEmail = /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/;
        }
        ModalUsuarioController.prototype.save = function () {
            var _this = this;
            if (!this.usuario.id) {
                this.usuarioService.save(this.usuario)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewUsuario: data });
                    _this.toastr.success("Usuário cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Usuário não pode ser cadastrado!');
                });
            }
            else {
                this.usuarioService.edit(this.usuario)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdateUsuario: data });
                    _this.toastr.success("Usuario editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Usuario não pode ser editado!');
                });
            }
        };
        ModalUsuarioController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalUsuarioController.$inject = ['UsuarioService', 'toastr', '$mdDialog', 'usuario', '$rootScope'];
        return ModalUsuarioController;
    }());
    Consermaq.ModalUsuarioController = ModalUsuarioController;
    angular.module(appConfig.appName).controller('ModalUsuarioController', ModalUsuarioController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ProdutoController = (function () {
        function ProdutoController($location, produtoService, toastr, mdDialog, timeout, $rootScope) {
            this.$location = $location;
            this.produtoService = produtoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$rootScope = $rootScope;
            this.produtos = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.isAdmin = this.$rootScope.sistemaContexo.usuarioLogado.isAdmin;
            this.loadProduto();
        }
        ProdutoController.prototype.loadProduto = function () {
            var _this = this;
            this.produtoService.listAll()
                .then(function (data) {
                _this.produtos = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar os Produtos, erro: " + response); });
        };
        ProdutoController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        ProdutoController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        ProdutoController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        ProdutoController.prototype.modalCreateProduto = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalProdutoController",
                templateUrl: 'app/views/produto/modal-produto.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    produto: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.produtos.push(response.NewProduto);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        ProdutoController.prototype.modalEditProduto = function (ev, produto) {
            var _this = this;
            var index = this.produtos.indexOf(produto);
            this.mdDialog.show({
                controller: "ModalProdutoController",
                templateUrl: 'app/views/produto/modal-produto.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    produto: function () { return angular.copy(produto); }
                }
            }).then(function (response) {
                if (response) {
                    _this.produtos[index] = response.UpdateProduto;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        ProdutoController.prototype.modalDeleteProduto = function (ev, produtos) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeleteProdutoController",
                templateUrl: 'app/views/produto/modal-delete-produto.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    produtos: function () { return produtos; }
                }
            }).then(function (response) {
                if (response) {
                    produtos.forEach(function (p) {
                        var index = _this.produtos.indexOf(p);
                        _this.produtos.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        ProdutoController.$inject = ['$location', 'ProdutoService', 'toastr', '$mdDialog', '$timeout', "$rootScope"];
        return ProdutoController;
    }());
    Consermaq.ProdutoController = ProdutoController;
    angular.module(appConfig.appName).controller('ProdutoController', ProdutoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalProdutoController = (function () {
        function ModalProdutoController(produtoService, toastr, mdDialog, produto) {
            this.produtoService = produtoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.produto = produto;
        }
        ModalProdutoController.prototype.saveProduto = function () {
            var _this = this;
            if (!this.produto.id) {
                this.produtoService.saveProduto(this.produto)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewProduto: data });
                    _this.toastr.success("Produto cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente não pode ser cadastrado!');
                });
            }
            else {
                this.produtoService.editProduto(this.produto)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdateProduto: data });
                    _this.toastr.success("Produto editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Produto não pode ser editado!');
                });
            }
        };
        ModalProdutoController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalProdutoController.$inject = ['ProdutoService', 'toastr', '$mdDialog', 'produto'];
        return ModalProdutoController;
    }());
    Consermaq.ModalProdutoController = ModalProdutoController;
    angular.module(appConfig.appName).controller('ModalProdutoController', ModalProdutoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalDeleteProdutoController = (function () {
        function ModalDeleteProdutoController(produtoService, toastr, mdDialog, produtos) {
            this.produtoService = produtoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.produtos = produtos;
        }
        ModalDeleteProdutoController.prototype.delete = function () {
            var _this = this;
            this.produtoService.deleteProdutoAlot(this.produtos)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Produtos excluidos com sucesso!");
                else
                    _this.toastr.success("Produto excluido com sucesso!");
                _this.mdDialog.hide({ produtos: data });
            })
                .catch(function (response) {
                _this.toastr.error('Produto não pode ser excluido!');
            });
        };
        ModalDeleteProdutoController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeleteProdutoController.$inject = ['ProdutoService', 'toastr', '$mdDialog', 'produtos'];
        return ModalDeleteProdutoController;
    }());
    Consermaq.ModalDeleteProdutoController = ModalDeleteProdutoController;
    angular.module(appConfig.appName).controller('ModalDeleteProdutoController', ModalDeleteProdutoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var SharedController = (function () {
        function SharedController($location, mdDialog) {
            this.$location = $location;
            this.mdDialog = mdDialog;
        }
        SharedController.prototype.modalConfigurarUsuario = function (ev, user) {
            this.mdDialog.show({
                controller: "ModalConfiguracaoUsuarioController",
                templateUrl: 'app/views/shared/modal-configuracao-usuario.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    usuario: function () { return user; }
                }
            }).then(function (response) {
            });
        };
        SharedController.prototype.logout = function () {
            this.$location.path("/logout");
        };
        SharedController.$inject = ['$location', '$mdDialog'];
        return SharedController;
    }());
    Consermaq.SharedController = SharedController;
    angular.module(appConfig.appName).controller('SharedController', SharedController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalConfiguracaoUsuarioController = (function () {
        function ModalConfiguracaoUsuarioController(usuarioService, toastr, mdDialog, usuario, $rootScope) {
            this.usuarioService = usuarioService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.usuario = usuario;
            this.$rootScope = $rootScope;
            this.validateEmail = /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/;
        }
        ModalConfiguracaoUsuarioController.prototype.limparCamposAlterarSenha = function () {
            this.senhaAtual = '';
            this.novaSenha = '';
            this.senhaRepetida = '';
        };
        ModalConfiguracaoUsuarioController.prototype.edit = function () {
            var _this = this;
            if (this.alterarSenha)
                this.usuario.password = this.novaSenha;
            this.usuarioService.edit(this.usuario)
                .then(function (data) {
                _this.$rootScope.sistemaContexo.usuarioLogado.password = data.password;
                _this.mdDialog.hide();
                _this.toastr.success("Alterações efetuadas com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Não pode ser efetuado as modificações!');
            });
        };
        ModalConfiguracaoUsuarioController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalConfiguracaoUsuarioController.$inject = ['UsuarioService', 'toastr', '$mdDialog', 'usuario', '$rootScope'];
        return ModalConfiguracaoUsuarioController;
    }());
    Consermaq.ModalConfiguracaoUsuarioController = ModalConfiguracaoUsuarioController;
    angular.module(appConfig.appName).controller('ModalConfiguracaoUsuarioController', ModalConfiguracaoUsuarioController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var RelatorioController = (function () {
        function RelatorioController($location, ordemServicoService, toastr, mdDialog, timeout, $rootScope) {
            this.$location = $location;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$rootScope = $rootScope;
            this.loadTabs();
            this.next = function () {
                this.selectedIndex = Math.min(this.selectedIndex + 1, 2);
            };
            this.previous = function () {
                this.selectedIndex = Math.max(this.selectedIndex - 1, 0);
            };
            this.$rootScope.$watch('this.selectedIndex', function (newValue, oldValue) {
                console.log('ttt');
            });
            this.escutar();
        }
        RelatorioController.prototype.loadTabs = function () {
            this.selectedIndex = 0;
        };
        RelatorioController.prototype.escutar = function () {
            this.$rootScope.$watch('this.selectedIndex', function (newValue, oldValue) {
                console.log('tew');
            });
        };
        RelatorioController.$inject = ['$location', 'OrdemServicoService', 'toastr', '$mdDialog', '$timeout', '$rootScope'];
        return RelatorioController;
    }());
    Consermaq.RelatorioController = RelatorioController;
    angular.module(appConfig.appName).controller('RelatorioController', RelatorioController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ListaOrdemServicoController = (function () {
        function ListaOrdemServicoController($location, ordemServicoService, toastr, mdDialog, timeout, $rootScope, filter) {
            this.$location = $location;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$rootScope = $rootScope;
            this.filter = filter;
            this.ordemServico = new Array();
            this.buildGrid();
        }
        ListaOrdemServicoController.prototype.buildGrid = function () {
            this.gridOptions = {
                data: new Array(),
                enableFiltering: true,
                enableRowSelection: true,
                enableRowHeaderSelection: false,
                multiSelect: false,
                enableGridMenu: true,
                columnDefs: [
                    {
                        field: 'id',
                        enableHiding: false,
                        displayName: "N° Ordem Serviço",
                        width: 150,
                        enableCellEdit: false,
                    },
                    {
                        field: 'servicoSolicitado',
                        enableHiding: false,
                        enableCellEdit: false,
                        displayName: "Solicitação",
                    },
                    {
                        field: 'status',
                        enableHiding: false,
                        displayName: "Status",
                        width: 150,
                        enableCellEdit: false,
                        cellTemplate: "app/views/relatorio/template/ListaOrdemServico/status.html"
                    },
                    {
                        field: 'dataInicial',
                        enableHiding: false,
                        displayName: "Abertura",
                        width: 220,
                        enableCellEdit: false,
                        cellTemplate: "app/views/relatorio/template/ListaOrdemServico/dataInicial.html"
                    },
                    {
                        field: 'dataEncerramento',
                        enableHiding: false,
                        displayName: "Encerramento",
                        width: 220,
                        enableCellEdit: false,
                        cellTemplate: "app/views/relatorio/template/ListaOrdemServico/dataEncerramento.html"
                    },
                    {
                        field: 'cliente.nome',
                        enableHiding: false,
                        displayName: "Cliente",
                        enableCellEdit: false,
                    },
                    {
                        field: 'valorTotal',
                        enableHiding: false,
                        displayName: "Valor",
                        width: 150,
                        enableCellEdit: false,
                        cellTemplate: "app/views/relatorio/template/ListaOrdemServico/valor.html"
                    }
                ],
                exporterCsvFilename: 'OrdemServico.csv',
                exporterPdfDefaultStyle: { fontSize: 9 },
                exporterPdfTableStyle: { margin: [0, 0, 0, 0] },
                exporterPdfTableHeaderStyle: { fontSize: 10, bold: true, italics: true, color: 'red' },
                exporterPdfHeader: { columns: [{ text: 'Ordem de Serviços', style: 'headerStyle', alignment: 'center' }] },
                exporterPdfFooter: function (currentPage, pageCount) {
                    return { text: currentPage.toString() + ' de ' + pageCount.toString(), style: 'footerStyle' };
                },
                exporterPdfCustomFormatter: function (docDefinition) {
                    docDefinition.styles.headerStyle = { fontSize: 22, bold: true };
                    docDefinition.styles.footerStyle = { fontSize: 10, bold: true };
                    return docDefinition;
                },
                exporterPdfOrientation: 'portrait',
                exporterPdfPageSize: 'LETTER',
                exporterPdfMaxGridWidth: 470,
                exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
                exporterFieldCallback: function (grid, row, col, value) {
                    if (col.name == 'status') {
                        value = value == 1 ? "Aberto" : value == 2 ? "Pendente" : "Finalizado";
                        return value;
                    }
                    if (col.name == 'dataInicial') {
                        value = grid.appScope.$parent.vm.filter('date')(value, 'dd/MM/yyyy');
                        return value;
                    }
                    if (col.name == 'dataEncerramento') {
                        value = grid.appScope.$parent.vm.filter('date')(value, 'dd/MM/yyyy');
                        return value;
                    }
                    return value;
                },
                toggleRow: function (rowNum) {
                    this.gridApi.treeBase.toggleRowTreeState(this.gridApi.grid.renderContainers.body.visibleRowCache[rowNum]);
                },
                toggleExpandNoChildren: function () {
                    this.gridOptions.showTreeExpandNoChildren = !this.gridOptions.showTreeExpandNoChildren;
                    this.gridApi.grid.refresh();
                },
                onRegisterApi: function (gridApi) {
                    this.gridApi = gridApi;
                },
                toggleRowSelection: function () {
                    this.gridApi.selection.clearSelectedRows();
                }
            };
            this.loadOrdemServico();
        };
        ListaOrdemServicoController.prototype.loadOrdemServico = function () {
            var _this = this;
            this.ordemServicoService.listAll()
                .then(function (data) {
                _this.ordemServico = data;
                _this.gridOptions.data = _this.ordemServico;
            })
                .catch(function (response) {
                _this.toastr.error("Erro ao carregar dados da grid");
            });
        };
        ListaOrdemServicoController.$inject = ['$location', 'OrdemServicoService', 'toastr', '$mdDialog',
            '$timeout', '$rootScope', '$filter'];
        return ListaOrdemServicoController;
    }());
    Consermaq.ListaOrdemServicoController = ListaOrdemServicoController;
    angular.module(appConfig.appName).controller('ListaOrdemServicoController', ListaOrdemServicoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var FaturamentoController = (function () {
        function FaturamentoController($location, ordemServicoService, toastr, mdDialog, timeout, $rootScope, filter) {
            this.$location = $location;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$rootScope = $rootScope;
            this.filter = filter;
            this.ordemServico = new Array();
            this.dataMaxCalendarioInicio = new Date();
        }
        FaturamentoController.prototype.buscarOrdemServico = function () {
            var _this = this;
            if (this.dataInicialFiltro) {
                this.ordemServicoService.buscarPorData(this.dataInicialFiltro, this.dataFinalFiltro)
                    .then(function (data) {
                    if (data.length > 0) {
                        _this.valor = 0;
                        _this.valorOrdemServicos(data);
                        _this.ordemServico = data;
                        _this.toastr.success("Ordem de serviços encontradas");
                    }
                    else
                        _this.toastr.info("Não foi encontrado nenhuma ordem de serviço");
                })
                    .catch(function (response) {
                    _this.toastr.error("Não foi encontrado nenhuma ordem de serviço");
                });
            }
        };
        FaturamentoController.prototype.valorOrdemServicos = function (ordemServicos) {
            var _this = this;
            ordemServicos.filter(function (o) {
                _this.valor = _this.valor + o.valorTotal;
            });
        };
        FaturamentoController.$inject = ['$location', 'OrdemServicoService', 'toastr', '$mdDialog',
            '$timeout', '$rootScope', '$filter'];
        return FaturamentoController;
    }());
    Consermaq.FaturamentoController = FaturamentoController;
    angular.module(appConfig.appName).controller('FaturamentoController', FaturamentoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var RelatorioOrdemServicoController = (function () {
        function RelatorioOrdemServicoController($location, ordemServicoService, toastr, mdDialog, timeout, $rootScope) {
            this.$location = $location;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.$rootScope = $rootScope;
            this.ordemServico = new Consermaq.OrdemServico();
        }
        RelatorioOrdemServicoController.prototype.buscarOrdemServico = function () {
            var _this = this;
            this.ordemServicoService.getById(this.numOrdemServico)
                .then(function (data) {
                _this.ordemServico = data;
                _this.cliente = _this.ordemServico.cliente.cpf != null ?
                    _this.ordemServico.cliente.nome + " - " + _this.ordemServico.cliente.cpf
                    : _this.ordemServico.cliente.nome + " - " + _this.ordemServico.cliente.cnpj;
                _this.toastr.success("Ordem de Serviço encontrada.");
            })
                .catch(function (response) {
                _this.toastr.error("Ordem de Serviço não encontrada.");
            });
        };
        RelatorioOrdemServicoController.$inject = ['$location', 'OrdemServicoService', 'toastr', '$mdDialog', '$timeout', '$rootScope'];
        return RelatorioOrdemServicoController;
    }());
    Consermaq.RelatorioOrdemServicoController = RelatorioOrdemServicoController;
    angular.module(appConfig.appName).controller('RelatorioOrdemServicoController', RelatorioOrdemServicoController);
})(Consermaq || (Consermaq = {}));
