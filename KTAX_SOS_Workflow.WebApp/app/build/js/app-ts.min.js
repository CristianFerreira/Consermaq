var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var appConfig = {
    appName: "Consermaq",
    version: "0.0.1",
    auth_token: "consermaq_token",
    auth_sistema_contexto: "consermaq_user",
    testMode: false,
    defaultRoute: "/",
    rootServiceRoute: "http://localhost:4500/",
    serviceUrls: function () {
        return {
            autenticacao: {
                sistema: appConfig.rootServiceRoute + "api/security/token"
            },
            cliente: {
                listAll: appConfig.rootServiceRoute + "api/cliente/listAll",
                getById: appConfig.rootServiceRoute + "api/pessoafisica/getById",
                listAllPF: appConfig.rootServiceRoute + "api/cliente/listPF",
                listAllPJ: appConfig.rootServiceRoute + "api/cliente/listPJ",
                delete: appConfig.rootServiceRoute + "api/cliente/delete",
                edit: appConfig.rootServiceRoute + "api/cliente/update",
                save: appConfig.rootServiceRoute + "api/cliente/create",
                deleteAlot: appConfig.rootServiceRoute + "api/cliente/deleteAlot"
            },
            produto: {
                getById: appConfig.rootServiceRoute + "api/product/getById",
                listAll: appConfig.rootServiceRoute + "api/products/listAll",
                deleteProduto: appConfig.rootServiceRoute + "api/product/delete",
                editProduto: appConfig.rootServiceRoute + "api/product/update",
                saveProduto: appConfig.rootServiceRoute + "api/product/create",
                deleteAlotProduto: appConfig.rootServiceRoute + "api/product/deleteAlot"
            },
            ordemServico: {
                listAll: appConfig.rootServiceRoute + "api/ordemServico/listAll",
                getById: appConfig.rootServiceRoute + "api/ordemServico/getById",
                delete: appConfig.rootServiceRoute + "api/ordemServico/delete",
                edit: appConfig.rootServiceRoute + "api/ordemServico/update",
                save: appConfig.rootServiceRoute + "api/ordemServico/create",
                deleteAlot: appConfig.rootServiceRoute + "api/ordemServico/deleteAlot"
            }
        };
    }
};
var Consermaq;
(function (Consermaq) {
    'use strict';
    var modules = new Array();
    modules.push('ngRoute');
    modules.push('ngTouch');
    modules.push('ngAnimate');
    modules.push('ngMessages');
    modules.push('ngMaterial');
    modules.push('md.data.table');
    modules.push('mdDataTable');
    modules.push('ngMdIcons');
    modules.push('ngSanitize');
    modules.push('ui.bootstrap');
    modules.push('toastr');
    modules.push('angular-loading-bar');
    modules.push('ui.mask');
    modules.push('ng-currency');
    modules.push('ngPrint');
    modules.push('mdPickers');
    angular.module(appConfig.appName, modules);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    'use strict';
    function config($routeProvider) {
        $routeProvider
            .when("/", {
            templateUrl: "app/views/cliente/pessoafisica/pessoafisica.html",
            controller: "PessoaFisicaController",
            controllerAs: "vm"
        })
            .when("/login", {
            templateUrl: "app/views/autenticacao/login.html",
            controller: "LoginController",
            controllerAs: "vm"
        })
            .when("/pessoafisica", {
            templateUrl: "app/views/cliente/pessoafisica/pessoafisica.html",
            controller: "PessoaFisicaController",
            controllerAs: "vm"
        })
            .when("/pessoajuridica", {
            templateUrl: "app/views/cliente/pessoajuridica/pessoajuridica.html",
            controller: "PessoaJuridicaController",
            controllerAs: "vm"
        })
            .when("/produtos", {
            templateUrl: "app/views/produto/produto.html",
            controller: "ProdutoController",
            controllerAs: "vm"
        })
            .when("/ordemServico", {
            templateUrl: "app/views/ordemServico/ordemServico.html",
            controller: "OrdemServicoController",
            controllerAs: "vm"
        })
            .when("/novaOrdemServico", {
            templateUrl: "app/views/ordemServico/novaOrdemServico.html",
            controller: "NovaOrdemServicoController",
            controllerAs: "vm"
        })
            .when("/novaOrdemServico/:id", {
            templateUrl: "app/views/ordemServico/novaOrdemServico.html",
            controller: "NovaOrdemServicoController",
            controllerAs: "vm"
        })
            .when("/logout", {
            templateUrl: "app/views/autenticacao/login.html",
            controller: "LogoutController",
            controllerAs: "vm"
        })
            .otherwise({
            templateUrl: "app/views/shared/404.html",
            controller: "SharedController",
            controllerAs: "vm"
        });
        ;
    }
    config.$inject = ['$routeProvider'];
    angular.module(appConfig.appName).config(config);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    'use strict';
    function config(cfpLoadingBarProvider, $locationProvider) {
        cfpLoadingBarProvider.includeSpinner = true;
        cfpLoadingBarProvider.includeBar = true;
        cfpLoadingBarProvider.parentSelector = '#loading-bar-container';
        cfpLoadingBarProvider.spinnerTemplate = '<div id="loading-bar-spinner">' +
            '   <div style="padding-left: 30px;">' +
            '       <div class="spinner-icon"></div>' +
            '   </div>' +
            '   <div class="spinner-text">Carregando...</div>' +
            '</div>';
        $locationProvider.hashPrefix('');
    }
    config.$inject = ['cfpLoadingBarProvider', '$locationProvider'];
    angular.module(appConfig.appName).config(config);
    function start($rootScope, autenticacaoService) {
        autenticacaoService.carregaUsuarioAutenticado();
    }
    angular.module(appConfig.appName).config(config);
    start.$inject = ['$rootScope', 'AutenticacaoService'];
    angular.module(appConfig.appName).run(start);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var User = (function () {
        function User() {
        }
        return User;
    }());
    Consermaq.User = User;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var SistemaContexto = (function () {
        function SistemaContexto() {
        }
        return SistemaContexto;
    }());
    Consermaq.SistemaContexto = SistemaContexto;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var Cliente = (function () {
        function Cliente() {
        }
        return Cliente;
    }());
    Consermaq.Cliente = Cliente;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var Produto = (function () {
        function Produto() {
        }
        return Produto;
    }());
    Consermaq.Produto = Produto;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var OrdemServico = (function () {
        function OrdemServico() {
        }
        return OrdemServico;
    }());
    Consermaq.OrdemServico = OrdemServico;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ServicoItem = (function () {
        function ServicoItem() {
        }
        return ServicoItem;
    }());
    Consermaq.ServicoItem = ServicoItem;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var Servico = (function () {
        function Servico() {
        }
        return Servico;
    }());
    Consermaq.Servico = Servico;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LoginModel = (function () {
        function LoginModel(nomeUsuario, senha) {
            this.nomeUsuario = nomeUsuario;
            this.senha = senha;
        }
        return LoginModel;
    }());
    Consermaq.LoginModel = LoginModel;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    'use strict';
    angular.module(appConfig.appName).directive('numberOnly', numberOnly);
    function numberOnly() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                var negativo = /\-/.test(attrs.numberOnly);
                var decimal = /\.|\,/.test(attrs.numberOnly) ? /\.|\,/.exec(attrs.numberOnly)[0] : null;
                var regExp = '^';
                regExp += negativo ? '[\\-]{0,1}' : '';
                regExp += '[\\d]+';
                if (decimal != null) {
                    regExp += '[\\' + decimal + '][\\d]+|';
                    if (negativo) {
                        regExp += '[\\-]{0,1}';
                    }
                    regExp += '[\\d]+';
                }
                regExp += '';
                var regExp1 = new RegExp(regExp);
                ngModel.$parsers.unshift(function (input) {
                    if (input === undefined)
                        return null;
                    if (input === null)
                        return;
                    input = input.toString().replace(/\./, decimal);
                    if (input == '-')
                        return input;
                    if (decimal !== null && input.charAt(input.length - 1) == decimal)
                        return input;
                    input = regExp1.test(input) ? regExp1.exec(input)[0] : null;
                    var viewVal = null;
                    if (input !== null) {
                        input = decimal != null ? parseFloat(input.replace(/\,/, '.')) : parseInt(input);
                    }
                    viewVal = isNaN(input) || input === null ? '' : input;
                    ngModel.$setViewValue(decimal != null ? viewVal.toString().replace(/\./, decimal) : viewVal.toString());
                    ngModel.$render();
                    return isNaN(input) ? null : input;
                });
                ngModel.$formatters.unshift(function (value) {
                    if (value !== undefined && value !== null) {
                        return decimal != null ? value.toString().replace(/\./, decimal) : value.toString();
                    }
                });
            }
        };
    }
    ;
})(Consermaq || (Consermaq = {}));
;
var Consermaq;
(function (Consermaq) {
    var AppServiceBase = (function () {
        function AppServiceBase($rootScope, $http) {
            this.rootScope = $rootScope;
            this.httpService = $http;
        }
        AppServiceBase.prototype.handlerResponded = function (response, params) {
            response.data.requestParams = params;
            return response.data;
        };
        AppServiceBase.prototype.getByIdFromUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.get(url + '/' + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, id); });
            return result;
        };
        AppServiceBase.prototype.listAllFromUrl = function (url) {
            var _this = this;
            var result = this.httpService.get(url, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.listAllByParamFromUrl = function (url, param) {
            var _this = this;
            var result = this.httpService.get(url + "/" + param, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.createByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.put(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.updateByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.post(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.removeByUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.delete(url + "/" + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.getFromUrl = function (url, params) {
            var _this = this;
            var result = this.httpService.get(url + (params ? params : ""), this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, (params ? params : "")); });
            return result;
        };
        AppServiceBase.prototype.postFromUrl = function (url, obj, header) {
            var _this = this;
            if (!header)
                header = this.rootScope.header;
            var result = this.httpService.post(url, obj, header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.$inject = ['$rootScope', '$http'];
        return AppServiceBase;
    }());
    Consermaq.AppServiceBase = AppServiceBase;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ClienteService = (function (_super) {
        __extends(ClienteService, _super);
        function ClienteService() {
            _super.apply(this, arguments);
        }
        ClienteService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().cliente.getById, id);
        };
        ClienteService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().cliente.listAll);
        };
        ClienteService.prototype.listAllPF = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().cliente.listAllPF);
        };
        ClienteService.prototype.listAllPJ = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().cliente.listAllPJ);
        };
        ClienteService.prototype.delete = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().cliente.delete, id);
        };
        ClienteService.prototype.deleteAlot = function (clientes) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().cliente.deleteAlot, clientes);
        };
        ClienteService.prototype.edit = function (cliente) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().cliente.edit, cliente);
        };
        ClienteService.prototype.save = function (cliente) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().cliente.save, cliente);
        };
        return ClienteService;
    }(Consermaq.AppServiceBase));
    Consermaq.ClienteService = ClienteService;
    angular.module(appConfig.appName).service("ClienteService", ClienteService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ProdutoService = (function (_super) {
        __extends(ProdutoService, _super);
        function ProdutoService() {
            _super.apply(this, arguments);
        }
        ProdutoService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().produto.getById, id);
        };
        ProdutoService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().produto.listAll);
        };
        ProdutoService.prototype.deleteProduto = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().produto.deleteProduto, id);
        };
        ProdutoService.prototype.deleteProdutoAlot = function (produtos) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().produto.deleteAlotProduto, produtos);
        };
        ProdutoService.prototype.editProduto = function (produto) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().produto.editProduto, produto);
        };
        ProdutoService.prototype.saveProduto = function (produto) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().produto.saveProduto, produto);
        };
        return ProdutoService;
    }(Consermaq.AppServiceBase));
    Consermaq.ProdutoService = ProdutoService;
    angular.module(appConfig.appName).service("ProdutoService", ProdutoService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var AutenticacaoService = (function (_super) {
        __extends(AutenticacaoService, _super);
        function AutenticacaoService($routeParams, $rootScope, $location, $http) {
            _super.call(this, $rootScope, $http);
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$http = $http;
        }
        AutenticacaoService.prototype.login = function (loginModel) {
            var _this = this;
            var result;
            result = this.autenticacao(loginModel)
                .then(function (response) {
                return _this.setAutenticacao(response);
            });
            return result;
        };
        AutenticacaoService.prototype.logout = function () {
            this.rootScope.token = null;
            this.rootScope.sistemaContexo = null;
            sessionStorage.removeItem(appConfig.auth_token);
            sessionStorage.removeItem(appConfig.auth_sistema_contexto);
            this.refreshHeader();
        };
        AutenticacaoService.prototype.carregaUsuarioAutenticado = function () {
            var _this = this;
            this.rootScope.token = sessionStorage.getItem(appConfig.auth_token);
            if (this.rootScope.token) {
                this.rootScope.sistemaContexo = angular.fromJson(sessionStorage
                    .getItem(appConfig.auth_sistema_contexto));
                this.refreshHeader();
                this.$location.path('/');
            }
            this.rootScope.$on("$routeChangeStart", function (event, next, current) {
                if (_this.rootScope.token == null) {
                    _this.$location.path('/login');
                }
            });
        };
        AutenticacaoService.prototype.autenticacao = function (login) {
            var dt = "grant_type=password&username=" + login.nomeUsuario + "&password=" + login.senha;
            var header = { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } };
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().autenticacao.sistema, dt, header);
        };
        AutenticacaoService.prototype.setAutenticacao = function (response) {
            sessionStorage.setItem(appConfig.auth_token, response.access_token);
            sessionStorage.setItem(appConfig.auth_sistema_contexto, response.sistema_contexto);
            this.carregaUsuarioAutenticado();
            return response;
        };
        AutenticacaoService.prototype.refreshHeader = function () {
            this.rootScope.header = {};
            if (this.rootScope.token && this.rootScope.sistemaContexo) {
                this.rootScope.header = {
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        'Authorization': 'Bearer ' + this.rootScope.token
                    }
                };
            }
        };
        AutenticacaoService.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            '$http'];
        return AutenticacaoService;
    }(Consermaq.AppServiceBase));
    Consermaq.AutenticacaoService = AutenticacaoService;
    angular.module(appConfig.appName).service("AutenticacaoService", AutenticacaoService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var OrdemServicoService = (function (_super) {
        __extends(OrdemServicoService, _super);
        function OrdemServicoService() {
            _super.apply(this, arguments);
        }
        OrdemServicoService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().ordemServico.getById, id);
        };
        OrdemServicoService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().ordemServico.listAll);
        };
        OrdemServicoService.prototype.delete = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().ordemServico.delete, id);
        };
        OrdemServicoService.prototype.deleteAlot = function (produtos) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.deleteAlot, produtos);
        };
        OrdemServicoService.prototype.edit = function (produto) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().ordemServico.edit, produto);
        };
        OrdemServicoService.prototype.save = function (ordemServico) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().ordemServico.save, ordemServico);
        };
        return OrdemServicoService;
    }(Consermaq.AppServiceBase));
    Consermaq.OrdemServicoService = OrdemServicoService;
    angular.module(appConfig.appName).service("OrdemServicoService", OrdemServicoService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LoginController = (function () {
        function LoginController($routeParams, $rootScope, $location, autenticacaoService, toastr) {
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$rootScope = $rootScope;
            this.autenticacaoService = autenticacaoService;
            this.toastr = toastr;
            this.loginModel = new Consermaq.LoginModel();
        }
        LoginController.prototype.login = function () {
            var _this = this;
            this.autenticacaoService.login(this.loginModel)
                .then(function (data) {
                _this.toastr.success("Seja bem vindo " + _this.$rootScope.sistemaContexo.usuarioLogado.email, "Você está autenticado");
                _this.$location.url("/");
            })
                .catch(function (response) {
                _this.toastr.error("Usuário ou senha inválido ", "Erro ao autenticar");
            });
        };
        LoginController.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            'AutenticacaoService',
            'toastr'];
        return LoginController;
    }());
    Consermaq.LoginController = LoginController;
    angular.module(appConfig.appName).controller('LoginController', LoginController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LogoutController = (function () {
        function LogoutController($routeParams, $rootScope, $location, autenticacaoService, toastr) {
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$rootScope = $rootScope;
            this.autenticacaoService = autenticacaoService;
            this.toastr = toastr;
            this.loginModel = new Consermaq.LoginModel();
            this.logout();
        }
        LogoutController.prototype.logout = function () {
            this.autenticacaoService.logout();
            this.toastr.success("Obrigado por usar o KTAX SOS Workflow", "Sessão encerrada");
            this.$location.url("/login");
        };
        LogoutController.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            'AutenticacaoService',
            'toastr'];
        return LogoutController;
    }());
    Consermaq.LogoutController = LogoutController;
    angular.module(appConfig.appName).controller('LogoutController', LogoutController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaFisicaController = (function () {
        function PessoaFisicaController($location, clienteService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.pessoasFisicas = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadPessoaFisica();
        }
        PessoaFisicaController.prototype.loadPessoaFisica = function () {
            var _this = this;
            this.clienteService.listAllPF()
                .then(function (data) {
                _this.pessoasFisicas = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar as Pessoas Fisicas, erro: " + response); });
        };
        PessoaFisicaController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        PessoaFisicaController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        PessoaFisicaController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        PessoaFisicaController.prototype.modalCreatePessoaFisica = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalPessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pf: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasFisicas.push(response.NewPessoaFisica);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaFisicaController.prototype.modalEditPessoaFisica = function (ev, pf) {
            var _this = this;
            var index = this.pessoasFisicas.indexOf(pf);
            this.mdDialog.show({
                controller: "ModalPessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pf: function () { return angular.copy(pf); }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasFisicas[index] = response.UpdatePessoaFisica;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaFisicaController.prototype.modalDeletePessoaFisica = function (ev, pessoasfisicas) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeletePessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-delete-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pessoasfisicas: function () { return pessoasfisicas; }
                }
            }).then(function (response) {
                if (response) {
                    pessoasfisicas.forEach(function (pf) {
                        var index = _this.pessoasFisicas.indexOf(pf);
                        _this.pessoasFisicas.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        PessoaFisicaController.$inject = ['$location', 'ClienteService', 'toastr', '$mdDialog', '$timeout'];
        return PessoaFisicaController;
    }());
    Consermaq.PessoaFisicaController = PessoaFisicaController;
    angular.module(appConfig.appName).controller('PessoaFisicaController', PessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalPessoaFisicaController = (function () {
        function ModalPessoaFisicaController(clienteService, toastr, mdDialog, pf) {
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pf = pf;
        }
        ModalPessoaFisicaController.prototype.savePessoaFisica = function () {
            var _this = this;
            if (!this.pf.id) {
                this.clienteService.save(this.pf)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewPessoaFisica: data });
                    _this.toastr.success("Cliente cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente não pode ser cadastrado!');
                });
            }
            else {
                this.clienteService.edit(this.pf)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdatePessoaFisica: data });
                    _this.toastr.success("Cliente Pessoa Fisica editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente Pessoa Fisica não pode ser editado!');
                });
            }
        };
        ModalPessoaFisicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalPessoaFisicaController.$inject = ['ClienteService', 'toastr', '$mdDialog', 'pf'];
        return ModalPessoaFisicaController;
    }());
    Consermaq.ModalPessoaFisicaController = ModalPessoaFisicaController;
    angular.module(appConfig.appName).controller('ModalPessoaFisicaController', ModalPessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalDeletePessoaFisicaController = (function () {
        function ModalDeletePessoaFisicaController(clienteService, toastr, mdDialog, pessoasfisicas) {
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pessoasfisicas = pessoasfisicas;
        }
        ModalDeletePessoaFisicaController.prototype.delete = function () {
            var _this = this;
            this.clienteService.deleteAlot(this.pessoasfisicas)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Pessoas Fisicas excluidas com sucesso!");
                else
                    _this.toastr.success("Pessoa Fisica excluida com sucesso!");
                _this.mdDialog.hide({ pessoasfisicas: data });
            })
                .catch(function (response) {
                _this.toastr.error('Pessoa Fisica não pode ser excluida!');
            });
        };
        ModalDeletePessoaFisicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeletePessoaFisicaController.$inject = ['ClienteService', 'toastr', '$mdDialog', 'pessoasfisicas'];
        return ModalDeletePessoaFisicaController;
    }());
    Consermaq.ModalDeletePessoaFisicaController = ModalDeletePessoaFisicaController;
    angular.module(appConfig.appName).controller('ModalDeletePessoaFisicaController', ModalDeletePessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaJuridicaController = (function () {
        function PessoaJuridicaController($location, clienteService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.pessoasJuridicas = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadPessoaJuridica();
        }
        PessoaJuridicaController.prototype.loadPessoaJuridica = function () {
            var _this = this;
            this.clienteService.listAllPJ()
                .then(function (data) {
                _this.pessoasJuridicas = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar as Pessoas Juridicas, erro: " + response); });
        };
        PessoaJuridicaController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        PessoaJuridicaController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        PessoaJuridicaController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        PessoaJuridicaController.prototype.modalCreatePessoaJuridica = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalPessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pj: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasJuridicas.push(response.NewPessoaJuridica);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaJuridicaController.prototype.modalEditPessoaJuridica = function (ev, pj) {
            var _this = this;
            var index = this.pessoasJuridicas.indexOf(pj);
            this.mdDialog.show({
                controller: "ModalPessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pj: function () { return angular.copy(pj); }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasJuridicas[index] = response.UpdatePessoaJuridica;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaJuridicaController.prototype.modalDeletePessoaJuridica = function (ev, pessoasJuridicas) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeletePessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-delete-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pessoasJuridicas: function () { return pessoasJuridicas; }
                }
            }).then(function (response) {
                if (response) {
                    pessoasJuridicas.forEach(function (pj) {
                        var index = _this.pessoasJuridicas.indexOf(pj);
                        _this.pessoasJuridicas.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        PessoaJuridicaController.$inject = ['$location', 'ClienteService', 'toastr', '$mdDialog', '$timeout'];
        return PessoaJuridicaController;
    }());
    Consermaq.PessoaJuridicaController = PessoaJuridicaController;
    angular.module(appConfig.appName).controller('PessoaJuridicaController', PessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalPessoaJuridicaController = (function () {
        function ModalPessoaJuridicaController(clienteService, toastr, mdDialog, pj) {
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pj = pj;
        }
        ModalPessoaJuridicaController.prototype.savePessoaJuridica = function () {
            var _this = this;
            if (!this.pj.id) {
                this.clienteService.save(this.pj)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewPessoaJuridica: data });
                    _this.toastr.success("Cliente cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente não pode ser cadastrado!');
                });
            }
            else {
                this.clienteService.edit(this.pj)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdatePessoaJuridica: data });
                    _this.toastr.success("Cliente Pessoa Juridica editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente Pessoa Juridica não pode ser editado!');
                });
            }
        };
        ModalPessoaJuridicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalPessoaJuridicaController.$inject = ['ClienteService', 'toastr', '$mdDialog', 'pj'];
        return ModalPessoaJuridicaController;
    }());
    Consermaq.ModalPessoaJuridicaController = ModalPessoaJuridicaController;
    angular.module(appConfig.appName).controller('ModalPessoaJuridicaController', ModalPessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalDeletePessoaJuridicaController = (function () {
        function ModalDeletePessoaJuridicaController(clienteService, toastr, mdDialog, pessoasjuridicas) {
            this.clienteService = clienteService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pessoasjuridicas = pessoasjuridicas;
        }
        ModalDeletePessoaJuridicaController.prototype.delete = function () {
            var _this = this;
            this.clienteService.deleteAlot(this.pessoasjuridicas)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Pessoas Juridicas excluidas com sucesso!");
                else
                    _this.toastr.success("Pessoa Juridica excluida com sucesso!");
                _this.mdDialog.hide({ pessoasjuridicas: data });
            })
                .catch(function (response) {
                _this.toastr.error('Pessoa Juridica não pode ser excluida!');
            });
        };
        ModalDeletePessoaJuridicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeletePessoaJuridicaController.$inject = ['ClienteService', 'toastr', '$mdDialog', 'pessoasJuridicas'];
        return ModalDeletePessoaJuridicaController;
    }());
    Consermaq.ModalDeletePessoaJuridicaController = ModalDeletePessoaJuridicaController;
    angular.module(appConfig.appName).controller('ModalDeletePessoaJuridicaController', ModalDeletePessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var NovaOrdemServicoController = (function () {
        function NovaOrdemServicoController($location, $routeParams, clienteService, ordemServicoService, toastr, $mdpDatePicker, $mdpTimePicker, timeout, $q) {
            this.$location = $location;
            this.$routeParams = $routeParams;
            this.clienteService = clienteService;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.$q = $q;
            this.$mdpDatePicker = $mdpDatePicker;
            this.$mdpTimePicker = $mdpTimePicker;
            this.timeout = timeout;
            this.clientes = new Array();
            this.ordemServico = new Consermaq.OrdemServico;
            this.load();
        }
        NovaOrdemServicoController.prototype.load = function () {
            var _this = this;
            this.loadClientes();
            if (this.$routeParams.id) {
                this.ordemServicoService.getById(this.$routeParams.id)
                    .then(function (data) {
                    _this.ordemServico = data;
                })
                    .catch(function (response) { return toastr.error("Não carregou a ordem de serviço, erro: " + response); });
            }
        };
        NovaOrdemServicoController.prototype.loadClientes = function () {
            var _this = this;
            this.clienteService.listAll()
                .then(function (data) {
                _this.clientes = data;
                return _this.clientes.map(function (c) {
                    c.nome = c.nome.toUpperCase();
                    return c;
                });
            })
                .catch(function (response) { return console.log("Não foi possivel carregar os clientes, erro: " + response); });
        };
        NovaOrdemServicoController.prototype.buscarPF = function (query) {
            var _this = this;
            var results = query ? this.clientes.filter(function (c) { return _this.filterPF(query, c); }) : this.clientes.filter(function (c) { return c.cpf != null; });
            var deferred = this.$q.defer();
            this.timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
            return deferred.promise;
        };
        NovaOrdemServicoController.prototype.filterPF = function (query, clientePF) {
            query = angular.uppercase(query);
            var regex = /^[0-9]/g;
            if (regex.test(query)) {
                if (clientePF.cpf) {
                    return (clientePF.cpf.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
            else {
                if (clientePF.cpf) {
                    return (clientePF.nome.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
        };
        ;
        NovaOrdemServicoController.prototype.buscarPJ = function (query) {
            var _this = this;
            var results = query ? this.clientes.filter(function (c) { return _this.filterPJ(query, c); }) : this.clientes.filter(function (c) { return c.cpf == null; });
            var deferred = this.$q.defer();
            this.timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
            return deferred.promise;
        };
        NovaOrdemServicoController.prototype.filterPJ = function (query, clientePJ) {
            query = angular.uppercase(query);
            var regex = /^[0-9]/g;
            if (regex.test(query)) {
                if (clientePJ.cnpj) {
                    return (clientePJ.cnpj.indexOf(query) === 0);
                }
                else {
                    return false;
                }
            }
            else {
                return (clientePJ.nome.indexOf(query) === 0);
            }
        };
        ;
        NovaOrdemServicoController.prototype.clearSelectItem = function () {
            this.selectedItem = new Array();
        };
        NovaOrdemServicoController.prototype.save = function () {
            var _this = this;
            if (this.selectedItem.id) {
                this.ordemServico.clienteId = this.selectedItem.id;
                this.ordemServicoService.save(this.ordemServico)
                    .then(function (data) {
                    _this.ordemServico = data;
                    _this.cliente = new Consermaq.Cliente();
                    if (_this.loadCliente())
                        _this.toastr.success("Ordem de serviço salva com sucesso!");
                    else
                        _this.toastr.error("Erro ao buscar dados do cliente!");
                }).catch(function (response) { _this.toastr.error("Erro ao salvar ordem de serviço!"); });
            }
        };
        NovaOrdemServicoController.prototype.loadCliente = function () {
            var _this = this;
            this.cliente = new Consermaq.Cliente();
            this.clientes.filter(function (c) {
                if (c.id == _this.ordemServico.clienteId)
                    _this.cliente = c;
            });
            if (this.cliente)
                return true;
            else
                return false;
        };
        NovaOrdemServicoController.prototype.limpar = function (form) {
            this.ordemServico = new Consermaq.OrdemServico();
            this.cliente = new Consermaq.Cliente();
            this.clearSelectItem();
            this.$location.path("/novaOrdemServico");
        };
        NovaOrdemServicoController.$inject = ['$location', '$routeParams', 'ClienteService', 'OrdemServicoService', 'toastr', '$mdpDatePicker', '$mdpTimePicker', '$timeout', '$q'];
        return NovaOrdemServicoController;
    }());
    Consermaq.NovaOrdemServicoController = NovaOrdemServicoController;
    angular.module(appConfig.appName).controller('NovaOrdemServicoController', NovaOrdemServicoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var OrdemServicoController = (function () {
        function OrdemServicoController($location, ordemServicoService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.ordemServicoService = ordemServicoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.ordemServicos = new Array();
            this.buscarPorCNPJouCPF = "cliente.cpf";
            this.loadOrdemServicos();
        }
        OrdemServicoController.prototype.loadOrdemServicos = function () {
            var _this = this;
            this.ordemServicoService.listAll()
                .then(function (data) {
                _this.ordemServicos = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar os Produtos, erro: " + response); });
        };
        OrdemServicoController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        OrdemServicoController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        OrdemServicoController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        OrdemServicoController.prototype.createOrdemServico = function () {
            this.$location.path("novaOrdemServico");
        };
        OrdemServicoController.prototype.editOrdemServico = function (ordemServico) {
            this.$location.path("novaOrdemServico/" + ordemServico.id);
        };
        OrdemServicoController.prototype.ordenarCPFouCNPJ = function () {
            if (this.buscarPorCNPJouCPF == "cliente.cpf") {
                this.buscarPorCNPJouCPF = "cliente.cnpj";
                return "cliente.cnpj";
            }
            else {
                this.buscarPorCNPJouCPF = "cliente.cpf";
                return "cliente.cpf";
            }
        };
        OrdemServicoController.prototype.modalDeleteProduto = function (ev, ordemServicos) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeleteOrdemServicoController",
                templateUrl: 'app/views/produto/modal-delete-ordem-servico.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    ordemServicos: function () { return ordemServicos; }
                }
            }).then(function (response) {
                if (response) {
                    ordemServicos.forEach(function (o) {
                        var index = _this.ordemServicos.indexOf(o);
                        _this.ordemServicos.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        OrdemServicoController.$inject = ['$location', 'OrdemServicoService', 'toastr', '$mdDialog', '$timeout'];
        return OrdemServicoController;
    }());
    Consermaq.OrdemServicoController = OrdemServicoController;
    angular.module(appConfig.appName).controller('OrdemServicoController', OrdemServicoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ProdutoController = (function () {
        function ProdutoController($location, produtoService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.produtoService = produtoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.produtos = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadProduto();
        }
        ProdutoController.prototype.loadProduto = function () {
            var _this = this;
            this.produtoService.listAll()
                .then(function (data) {
                _this.produtos = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar os Produtos, erro: " + response); });
        };
        ProdutoController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        ProdutoController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        ProdutoController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        ProdutoController.prototype.modalCreateProduto = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalProdutoController",
                templateUrl: 'app/views/produto/modal-produto.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    produto: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.produtos.push(response.NewProduto);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        ProdutoController.prototype.modalEditProduto = function (ev, produto) {
            var _this = this;
            var index = this.produtos.indexOf(produto);
            this.mdDialog.show({
                controller: "ModalProdutoController",
                templateUrl: 'app/views/produto/modal-produto.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    produto: function () { return angular.copy(produto); }
                }
            }).then(function (response) {
                if (response) {
                    _this.produtos[index] = response.UpdateProduto;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        ProdutoController.prototype.modalDeleteProduto = function (ev, produtos) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeleteProdutoController",
                templateUrl: 'app/views/produto/modal-delete-produto.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    produtos: function () { return produtos; }
                }
            }).then(function (response) {
                if (response) {
                    produtos.forEach(function (p) {
                        var index = _this.produtos.indexOf(p);
                        _this.produtos.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        ProdutoController.$inject = ['$location', 'ProdutoService', 'toastr', '$mdDialog', '$timeout'];
        return ProdutoController;
    }());
    Consermaq.ProdutoController = ProdutoController;
    angular.module(appConfig.appName).controller('ProdutoController', ProdutoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalProdutoController = (function () {
        function ModalProdutoController(produtoService, toastr, mdDialog, produto) {
            this.produtoService = produtoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.produto = produto;
        }
        ModalProdutoController.prototype.saveProduto = function () {
            var _this = this;
            if (!this.produto.id) {
                this.produtoService.saveProduto(this.produto)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewProduto: data });
                    _this.toastr.success("Produto cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente não pode ser cadastrado!');
                });
            }
            else {
                this.produtoService.editProduto(this.produto)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdateProduto: data });
                    _this.toastr.success("Produto editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Produto não pode ser editado!');
                });
            }
        };
        ModalProdutoController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalProdutoController.$inject = ['ProdutoService', 'toastr', '$mdDialog', 'produto'];
        return ModalProdutoController;
    }());
    Consermaq.ModalProdutoController = ModalProdutoController;
    angular.module(appConfig.appName).controller('ModalProdutoController', ModalProdutoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalDeleteProdutoController = (function () {
        function ModalDeleteProdutoController(produtoService, toastr, mdDialog, produtos) {
            this.produtoService = produtoService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.produtos = produtos;
        }
        ModalDeleteProdutoController.prototype.delete = function () {
            var _this = this;
            this.produtoService.deleteProdutoAlot(this.produtos)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Produtos excluidos com sucesso!");
                else
                    _this.toastr.success("Produto excluido com sucesso!");
                _this.mdDialog.hide({ produtos: data });
            })
                .catch(function (response) {
                _this.toastr.error('Produto não pode ser excluido!');
            });
        };
        ModalDeleteProdutoController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeleteProdutoController.$inject = ['ProdutoService', 'toastr', '$mdDialog', 'produtos'];
        return ModalDeleteProdutoController;
    }());
    Consermaq.ModalDeleteProdutoController = ModalDeleteProdutoController;
    angular.module(appConfig.appName).controller('ModalDeleteProdutoController', ModalDeleteProdutoController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var SharedController = (function () {
        function SharedController($location) {
            this.$location = $location;
        }
        SharedController.prototype.logout = function () {
            this.$location.path("/logout");
        };
        SharedController.$inject = ['$location'];
        return SharedController;
    }());
    Consermaq.SharedController = SharedController;
    angular.module(appConfig.appName).controller('SharedController', SharedController);
})(Consermaq || (Consermaq = {}));
