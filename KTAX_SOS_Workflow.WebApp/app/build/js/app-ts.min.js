var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var appConfig = {
    appName: "Consermaq",
    version: "0.0.1",
    auth_token: "consermaq_token",
    auth_sistema_contexto: "consermaq_user",
    testMode: false,
    defaultRoute: "/",
    rootServiceRoute: "http://localhost:4100/",
    serviceUrls: function () {
        return {
            autenticacao: {
                sistema: appConfig.rootServiceRoute + "api/security/token"
            },
            pessoafisica: {
                getById: appConfig.rootServiceRoute + "api/pessoafisica/getById",
                listAll: appConfig.rootServiceRoute + "api/pessoafisica/listAll",
                deletePessoaFisica: appConfig.rootServiceRoute + "api/pessoafisica/delete",
                editPessoaFisica: appConfig.rootServiceRoute + "api/pessoafisica/update",
                savePessoaFisica: appConfig.rootServiceRoute + "api/pessoafisica/create",
                deleteAlotPessoaFisica: appConfig.rootServiceRoute + "api/pessoafisica/deleteAlot"
            },
            pessoajuridica: {
                getById: appConfig.rootServiceRoute + "api/pessoajuridica/getById",
                listAll: appConfig.rootServiceRoute + "api/pessoajuridica/listAll",
                deletePessoaJuridica: appConfig.rootServiceRoute + "api/pessoajuridica/delete",
                editPessoaJuridica: appConfig.rootServiceRoute + "api/pessoajuridica/update",
                savePessoaJuridica: appConfig.rootServiceRoute + "api/pessoajuridica/create",
                deleteAlotPessoaJuridica: appConfig.rootServiceRoute + "api/pessoajuridica/deleteAlot"
            },
        };
    }
};
var Consermaq;
(function (Consermaq) {
    'use strict';
    var modules = new Array();
    modules.push('ngRoute');
    modules.push('ngTouch');
    modules.push('ngAnimate');
    modules.push('ngMessages');
    modules.push('ngMaterial');
    modules.push('md.data.table');
    modules.push('ui.bootstrap');
    modules.push('toastr');
    modules.push('angular-loading-bar');
    modules.push('ui.mask');
    angular.module(appConfig.appName, modules);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    'use strict';
    function config($routeProvider) {
        $routeProvider
            .when("/", {
            templateUrl: "app/views/cliente/pessoafisica/pessoafisica.html",
            controller: "PessoaFisicaController",
            controllerAs: "vm"
        })
            .when("/login", {
            templateUrl: "app/views/autenticacao/login.html",
            controller: "LoginController",
            controllerAs: "vm"
        })
            .when("/pessoafisica", {
            templateUrl: "app/views/cliente/pessoafisica/pessoafisica.html",
            controller: "PessoaFisicaController",
            controllerAs: "vm"
        })
            .when("/pessoajuridica", {
            templateUrl: "app/views/cliente/pessoajuridica/pessoajuridica.html",
            controller: "PessoaJuridicaController",
            controllerAs: "vm"
        })
            .when("/logout", {
            templateUrl: "app/views/autenticacao/login.html",
            controller: "LogoutController",
            controllerAs: "vm"
        })
            .otherwise({
            templateUrl: "app/views/shared/404.html",
            controller: "SharedController",
            controllerAs: "vm"
        });
        ;
    }
    config.$inject = ['$routeProvider'];
    angular.module(appConfig.appName).config(config);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    'use strict';
    function config(cfpLoadingBarProvider, $locationProvider) {
        cfpLoadingBarProvider.includeSpinner = true;
        cfpLoadingBarProvider.includeBar = true;
        cfpLoadingBarProvider.parentSelector = '#loading-bar-container';
        cfpLoadingBarProvider.spinnerTemplate = '<div id="loading-bar-spinner">' +
            '   <div style="padding-left: 30px;">' +
            '       <div class="spinner-icon"></div>' +
            '   </div>' +
            '   <div class="spinner-text">Carregando...</div>' +
            '</div>';
        $locationProvider.hashPrefix('');
    }
    config.$inject = ['cfpLoadingBarProvider', '$locationProvider'];
    angular.module(appConfig.appName).config(config);
    function start($rootScope, autenticacaoService) {
        autenticacaoService.carregaUsuarioAutenticado();
    }
    angular.module(appConfig.appName).config(config);
    start.$inject = ['$rootScope', 'AutenticacaoService'];
    angular.module(appConfig.appName).run(start);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var User = (function () {
        function User() {
        }
        return User;
    }());
    Consermaq.User = User;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var SistemaContexto = (function () {
        function SistemaContexto() {
        }
        return SistemaContexto;
    }());
    Consermaq.SistemaContexto = SistemaContexto;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var Pessoa = (function () {
        function Pessoa() {
        }
        return Pessoa;
    }());
    Consermaq.Pessoa = Pessoa;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaFisica = (function (_super) {
        __extends(PessoaFisica, _super);
        function PessoaFisica() {
            _super.call(this);
        }
        return PessoaFisica;
    }(Consermaq.Pessoa));
    Consermaq.PessoaFisica = PessoaFisica;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaJuridica = (function (_super) {
        __extends(PessoaJuridica, _super);
        function PessoaJuridica() {
            _super.call(this);
        }
        return PessoaJuridica;
    }(Consermaq.Pessoa));
    Consermaq.PessoaJuridica = PessoaJuridica;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LoginModel = (function () {
        function LoginModel(nomeUsuario, senha) {
            this.nomeUsuario = nomeUsuario;
            this.senha = senha;
        }
        return LoginModel;
    }());
    Consermaq.LoginModel = LoginModel;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var AppServiceBase = (function () {
        function AppServiceBase($rootScope, $http) {
            this.rootScope = $rootScope;
            this.httpService = $http;
        }
        AppServiceBase.prototype.handlerResponded = function (response, params) {
            response.data.requestParams = params;
            return response.data;
        };
        AppServiceBase.prototype.getByIdFromUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.get(url + '/' + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, id); });
            return result;
        };
        AppServiceBase.prototype.listAllFromUrl = function (url) {
            var _this = this;
            var result = this.httpService.get(url, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.listAllByParamFromUrl = function (url, param) {
            var _this = this;
            var result = this.httpService.get(url + "/" + param, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.createByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.put(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.updateByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.post(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.removeByUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.delete(url + "/" + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.getFromUrl = function (url, params) {
            var _this = this;
            var result = this.httpService.get(url + (params ? params : ""), this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, (params ? params : "")); });
            return result;
        };
        AppServiceBase.prototype.postFromUrl = function (url, obj, header) {
            var _this = this;
            if (!header)
                header = this.rootScope.header;
            var result = this.httpService.post(url, obj, header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.$inject = ['$rootScope', '$http'];
        return AppServiceBase;
    }());
    Consermaq.AppServiceBase = AppServiceBase;
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaFisicaService = (function (_super) {
        __extends(PessoaFisicaService, _super);
        function PessoaFisicaService() {
            _super.apply(this, arguments);
        }
        PessoaFisicaService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().pessoafisica.getById, id);
        };
        PessoaFisicaService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().pessoafisica.listAll);
        };
        PessoaFisicaService.prototype.deletePessoaFisica = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().pessoafisica.deletePessoaFisica, id);
        };
        PessoaFisicaService.prototype.deletePessoaFisicaAlot = function (pessoasfisicas) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().pessoafisica.deleteAlotPessoaFisica, pessoasfisicas);
        };
        PessoaFisicaService.prototype.editPessoaFisica = function (pessoafisica) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().pessoafisica.editPessoaFisica, pessoafisica);
        };
        PessoaFisicaService.prototype.savePessoaFisica = function (pessoafisica) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().pessoafisica.savePessoaFisica, pessoafisica);
        };
        return PessoaFisicaService;
    }(Consermaq.AppServiceBase));
    Consermaq.PessoaFisicaService = PessoaFisicaService;
    angular.module(appConfig.appName).service("PessoaFisicaService", PessoaFisicaService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaJuridicaService = (function (_super) {
        __extends(PessoaJuridicaService, _super);
        function PessoaJuridicaService() {
            _super.apply(this, arguments);
        }
        PessoaJuridicaService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().pessoajuridica.getById, id);
        };
        PessoaJuridicaService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().pessoajuridica.listAll);
        };
        PessoaJuridicaService.prototype.deletePessoaJuridica = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().pessoajuridica.deletePessoaJuridica, id);
        };
        PessoaJuridicaService.prototype.deletePessoaJuridicaAlot = function (pessoasjuridicas) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().pessoajuridica.deleteAlotPessoaJuridica, pessoasjuridicas);
        };
        PessoaJuridicaService.prototype.editPessoaJuridica = function (pessoajuridica) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().pessoajuridica.editPessoaJuridica, pessoajuridica);
        };
        PessoaJuridicaService.prototype.savePessoaJuridica = function (pessoajuridica) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().pessoajuridica.savePessoaJuridica, pessoajuridica);
        };
        return PessoaJuridicaService;
    }(Consermaq.AppServiceBase));
    Consermaq.PessoaJuridicaService = PessoaJuridicaService;
    angular.module(appConfig.appName).service("PessoaJuridicaService", PessoaJuridicaService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var AutenticacaoService = (function (_super) {
        __extends(AutenticacaoService, _super);
        function AutenticacaoService($routeParams, $rootScope, $location, $http) {
            _super.call(this, $rootScope, $http);
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$http = $http;
        }
        AutenticacaoService.prototype.login = function (loginModel) {
            var _this = this;
            var result;
            result = this.autenticacao(loginModel)
                .then(function (response) {
                return _this.setAutenticacao(response);
            });
            return result;
        };
        AutenticacaoService.prototype.logout = function () {
            this.rootScope.token = null;
            this.rootScope.sistemaContexo = null;
            sessionStorage.removeItem(appConfig.auth_token);
            sessionStorage.removeItem(appConfig.auth_sistema_contexto);
            this.refreshHeader();
        };
        AutenticacaoService.prototype.carregaUsuarioAutenticado = function () {
            var _this = this;
            this.rootScope.token = sessionStorage.getItem(appConfig.auth_token);
            if (this.rootScope.token) {
                this.rootScope.sistemaContexo = angular.fromJson(sessionStorage
                    .getItem(appConfig.auth_sistema_contexto));
                this.refreshHeader();
                this.$location.path('/');
            }
            this.rootScope.$on("$routeChangeStart", function (event, next, current) {
                if (_this.rootScope.token == null) {
                    _this.$location.path('/login');
                }
            });
        };
        AutenticacaoService.prototype.autenticacao = function (login) {
            var dt = "grant_type=password&username=" + login.nomeUsuario + "&password=" + login.senha;
            var header = { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } };
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().autenticacao.sistema, dt, header);
        };
        AutenticacaoService.prototype.setAutenticacao = function (response) {
            sessionStorage.setItem(appConfig.auth_token, response.access_token);
            sessionStorage.setItem(appConfig.auth_sistema_contexto, response.sistema_contexto);
            this.carregaUsuarioAutenticado();
            return response;
        };
        AutenticacaoService.prototype.refreshHeader = function () {
            this.rootScope.header = {};
            if (this.rootScope.token && this.rootScope.sistemaContexo) {
                this.rootScope.header = {
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        'Authorization': 'Bearer ' + this.rootScope.token
                    }
                };
            }
        };
        AutenticacaoService.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            '$http'];
        return AutenticacaoService;
    }(Consermaq.AppServiceBase));
    Consermaq.AutenticacaoService = AutenticacaoService;
    angular.module(appConfig.appName).service("AutenticacaoService", AutenticacaoService);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LoginController = (function () {
        function LoginController($routeParams, $rootScope, $location, autenticacaoService, toastr) {
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$rootScope = $rootScope;
            this.autenticacaoService = autenticacaoService;
            this.toastr = toastr;
            this.loginModel = new Consermaq.LoginModel();
        }
        LoginController.prototype.login = function () {
            var _this = this;
            this.autenticacaoService.login(this.loginModel)
                .then(function (data) {
                _this.toastr.success("Seja bem vindo " + _this.$rootScope.sistemaContexo.usuarioLogado.email, "Você está autenticado");
                _this.$location.url("/");
            })
                .catch(function (response) {
                _this.toastr.error("Usuário ou senha inválido ", "Erro ao autenticar");
            });
        };
        LoginController.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            'AutenticacaoService',
            'toastr'];
        return LoginController;
    }());
    Consermaq.LoginController = LoginController;
    angular.module(appConfig.appName).controller('LoginController', LoginController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var LogoutController = (function () {
        function LogoutController($routeParams, $rootScope, $location, autenticacaoService, toastr) {
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$rootScope = $rootScope;
            this.autenticacaoService = autenticacaoService;
            this.toastr = toastr;
            this.loginModel = new Consermaq.LoginModel();
            this.logout();
        }
        LogoutController.prototype.logout = function () {
            this.autenticacaoService.logout();
            this.toastr.success("Obrigado por usar o KTAX SOS Workflow", "Sessão encerrada");
            this.$location.url("/login");
        };
        LogoutController.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            'AutenticacaoService',
            'toastr'];
        return LogoutController;
    }());
    Consermaq.LogoutController = LogoutController;
    angular.module(appConfig.appName).controller('LogoutController', LogoutController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaFisicaController = (function () {
        function PessoaFisicaController($location, pessoaFisicaService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.pessoaFisicaService = pessoaFisicaService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.pessoasFisicas = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadPessoaFisica();
        }
        PessoaFisicaController.prototype.loadPessoaFisica = function () {
            var _this = this;
            this.pessoaFisicaService.listAll()
                .then(function (data) {
                _this.pessoasFisicas = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar as Pessoas Fisicas, erro: " + response); });
        };
        PessoaFisicaController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        PessoaFisicaController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        PessoaFisicaController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        PessoaFisicaController.prototype.modalCreatePessoaFisica = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalPessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pf: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasFisicas.push(response.NewPessoaFisica);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaFisicaController.prototype.modalEditPessoaFisica = function (ev, pf) {
            var _this = this;
            var index = this.pessoasFisicas.indexOf(pf);
            this.mdDialog.show({
                controller: "ModalPessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pf: function () { return angular.copy(pf); }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasFisicas[index] = response.UpdatePessoaFisica;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaFisicaController.prototype.modalDeletePessoaFisica = function (ev, pessoasfisicas) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeletePessoaFisicaController",
                templateUrl: 'app/views/cliente/pessoafisica/modal-delete-pessoafisica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pessoasfisicas: function () { return pessoasfisicas; }
                }
            }).then(function (response) {
                if (response) {
                    pessoasfisicas.forEach(function (pf) {
                        var index = _this.pessoasFisicas.indexOf(pf);
                        _this.pessoasFisicas.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        PessoaFisicaController.$inject = ['$location', 'PessoaFisicaService', 'toastr', '$mdDialog', '$timeout'];
        return PessoaFisicaController;
    }());
    Consermaq.PessoaFisicaController = PessoaFisicaController;
    angular.module(appConfig.appName).controller('PessoaFisicaController', PessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalPessoaFisicaController = (function () {
        function ModalPessoaFisicaController(pessoaFisicaService, toastr, mdDialog, pf) {
            this.pessoaFisicaService = pessoaFisicaService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pf = pf;
        }
        ModalPessoaFisicaController.prototype.savePessoaFisica = function () {
            var _this = this;
            if (!this.pf.id) {
                this.pessoaFisicaService.savePessoaFisica(this.pf)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewPessoaFisica: data });
                    _this.toastr.success("Cliente cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente não pode ser cadastrado!');
                });
            }
            else {
                this.pessoaFisicaService.editPessoaFisica(this.pf)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdatePessoaFisica: data });
                    _this.toastr.success("Cliente Pessoa Fisica editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente Pessoa Fisica não pode ser editado!');
                });
            }
        };
        ModalPessoaFisicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalPessoaFisicaController.$inject = ['PessoaFisicaService', 'toastr', '$mdDialog', 'pf'];
        return ModalPessoaFisicaController;
    }());
    Consermaq.ModalPessoaFisicaController = ModalPessoaFisicaController;
    angular.module(appConfig.appName).controller('ModalPessoaFisicaController', ModalPessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalDeletePessoaFisicaController = (function () {
        function ModalDeletePessoaFisicaController(pessoaFisicaService, toastr, mdDialog, pessoasfisicas) {
            this.pessoaFisicaService = pessoaFisicaService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pessoasfisicas = pessoasfisicas;
        }
        ModalDeletePessoaFisicaController.prototype.delete = function () {
            var _this = this;
            this.pessoaFisicaService.deletePessoaFisicaAlot(this.pessoasfisicas)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Pessoas Fisicas excluidas com sucesso!");
                else
                    _this.toastr.success("Pessoa Fisica excluida com sucesso!");
                _this.mdDialog.hide({ pessoasfisicas: data });
            })
                .catch(function (response) {
                _this.toastr.error('Pessoa Fisica não pode ser excluida!');
            });
        };
        ModalDeletePessoaFisicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeletePessoaFisicaController.$inject = ['PessoaFisicaService', 'toastr', '$mdDialog', 'pessoasfisicas'];
        return ModalDeletePessoaFisicaController;
    }());
    Consermaq.ModalDeletePessoaFisicaController = ModalDeletePessoaFisicaController;
    angular.module(appConfig.appName).controller('ModalDeletePessoaFisicaController', ModalDeletePessoaFisicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var PessoaJuridicaController = (function () {
        function PessoaJuridicaController($location, pessoaJuridicaService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.pessoaJuridicaService = pessoaJuridicaService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.pessoasJuridicas = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: false,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadPessoaJuridica();
        }
        PessoaJuridicaController.prototype.loadPessoaJuridica = function () {
            var _this = this;
            this.pessoaJuridicaService.listAll()
                .then(function (data) {
                _this.pessoasJuridicas = data;
            })
                .catch(function (response) { return console.log("Não foi possivel carregar as Pessoas Juridicas, erro: " + response); });
        };
        PessoaJuridicaController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        PessoaJuridicaController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        PessoaJuridicaController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 2000);
        };
        PessoaJuridicaController.prototype.modalCreatePessoaJuridica = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalPessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pj: function () { return null; }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasJuridicas.push(response.NewPessoaJuridica);
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaJuridicaController.prototype.modalEditPessoaJuridica = function (ev, pj) {
            var _this = this;
            var index = this.pessoasJuridicas.indexOf(pj);
            this.mdDialog.show({
                controller: "ModalPessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pj: function () { return angular.copy(pj); }
                }
            }).then(function (response) {
                if (response) {
                    _this.pessoasJuridicas[index] = response.UpdatePessoaJuridica;
                    _this.selected = new Array();
                    _this.loadStuff();
                }
            });
        };
        PessoaJuridicaController.prototype.modalDeletePessoaJuridica = function (ev, pessoasJuridicas) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeletePessoaJuridicaController",
                templateUrl: 'app/views/cliente/pessoajuridica/modal-delete-pessoajuridica.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    pessoasJuridicas: function () { return pessoasJuridicas; }
                }
            }).then(function (response) {
                if (response) {
                    pessoasJuridicas.forEach(function (pj) {
                        var index = _this.pessoasJuridicas.indexOf(pj);
                        _this.pessoasJuridicas.splice(index, 1);
                    });
                    _this.loadStuff();
                    _this.selected = new Array();
                }
            });
        };
        PessoaJuridicaController.$inject = ['$location', 'PessoaJuridicaService', 'toastr', '$mdDialog', '$timeout'];
        return PessoaJuridicaController;
    }());
    Consermaq.PessoaJuridicaController = PessoaJuridicaController;
    angular.module(appConfig.appName).controller('PessoaJuridicaController', PessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalPessoaJuridicaController = (function () {
        function ModalPessoaJuridicaController(pessoaJuridicaService, toastr, mdDialog, pj) {
            this.pessoaJuridicaService = pessoaJuridicaService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pj = pj;
        }
        ModalPessoaJuridicaController.prototype.savePessoaJuridica = function () {
            var _this = this;
            if (!this.pj.id) {
                this.pessoaJuridicaService.savePessoaJuridica(this.pj)
                    .then(function (data) {
                    _this.mdDialog.hide({ NewPessoaJuridica: data });
                    _this.toastr.success("Cliente cadastrado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente não pode ser cadastrado!');
                });
            }
            else {
                this.pessoaJuridicaService.editPessoaJuridica(this.pj)
                    .then(function (data) {
                    _this.mdDialog.hide({ UpdatePessoaJuridica: data });
                    _this.toastr.success("Cliente Pessoa Juridica editado com sucesso!");
                })
                    .catch(function (response) {
                    _this.toastr.error('Cliente Pessoa Juridica não pode ser editado!');
                });
            }
        };
        ModalPessoaJuridicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalPessoaJuridicaController.$inject = ['PessoaJuridicaService', 'toastr', '$mdDialog', 'pj'];
        return ModalPessoaJuridicaController;
    }());
    Consermaq.ModalPessoaJuridicaController = ModalPessoaJuridicaController;
    angular.module(appConfig.appName).controller('ModalPessoaJuridicaController', ModalPessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var ModalDeletePessoaJuridicaController = (function () {
        function ModalDeletePessoaJuridicaController(pessoaJuridicaService, toastr, mdDialog, pessoasjuridicas) {
            this.pessoaJuridicaService = pessoaJuridicaService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.pessoasjuridicas = pessoasjuridicas;
        }
        ModalDeletePessoaJuridicaController.prototype.delete = function () {
            var _this = this;
            this.pessoaJuridicaService.deletePessoaJuridicaAlot(this.pessoasjuridicas)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Pessoas Juridicas excluidas com sucesso!");
                else
                    _this.toastr.success("Pessoa Juridica excluida com sucesso!");
                _this.mdDialog.hide({ pessoasjuridicas: data });
            })
                .catch(function (response) {
                _this.toastr.error('Pessoa Juridica não pode ser excluida!');
            });
        };
        ModalDeletePessoaJuridicaController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeletePessoaJuridicaController.$inject = ['PessoaJuridicaService', 'toastr', '$mdDialog', 'pessoasJuridicas'];
        return ModalDeletePessoaJuridicaController;
    }());
    Consermaq.ModalDeletePessoaJuridicaController = ModalDeletePessoaJuridicaController;
    angular.module(appConfig.appName).controller('ModalDeletePessoaJuridicaController', ModalDeletePessoaJuridicaController);
})(Consermaq || (Consermaq = {}));
var Consermaq;
(function (Consermaq) {
    var SharedController = (function () {
        function SharedController($location) {
            this.$location = $location;
        }
        SharedController.prototype.logout = function () {
            this.$location.path("/logout");
        };
        SharedController.$inject = ['$location'];
        return SharedController;
    }());
    Consermaq.SharedController = SharedController;
    angular.module(appConfig.appName).controller('SharedController', SharedController);
})(Consermaq || (Consermaq = {}));
